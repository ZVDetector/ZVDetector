{
    "messages": {
        "Device and Service Discovery": [
            "NWK_addr_rsp",
            "IEEE_addr_rsp",
            "Node_Desc_rsp",
            "Power_Desc_rsp",
            "Simple_Desc_rsp",
            "Active_EP_rsp",
            "Match_Desc_rsp",
            "Complex_Desc_rsp",
            "User_Desc_rsp",
            "User_Desc_conf",
            "Parent_annce_rsp",
            "System_Server_Discovery_rsp",
            "Discovery_store_rsp",
            "Node_Desc_store_rsp",
            "Power_Desc_store_rsp",
            "Active_EP_store_rsp",
            "Simple_Desc_store_rsp",
            "Remove_node_cache_rsp",
            "Find_node_cache_rsp",
            "Extended_Simple_Desc_rsp",
            "Extended_Active_EP_rsp"
        ],
        "End Device Bind, Bind, Unbind Bind Management": [
            "End_Device_Bind_rsp",
            "Bind_rsp",
            "Unbind_rsp",
            "Bind_Register_rsp",
            "Replace_Device_rsp",
            "Store_Bkup_Bind_Entry_rsp",
            "Remove_Bkup_Bind_Entry_rsp",
            "Backup_Bind_Table_rsp",
            "Recover_Bind_Table_rsp",
            "Backup_Source_Bind_rsp",
            "Recover_Source_Bind_rsp"
        ],
        "Network Management": [
            "Mgmt_NWK_Disc_rsp",
            "Mgmt_Lqi_rsp",
            "Mgmt_Rtg_rsp",
            "Mgmt_Bind_rsp",
            "Mgmt_Leave_rsp",
            "Mgmt_Direct_Join_rsp",
            "Mgmt_Permit_Joining_rsp",
            "Mgmt_Cache_rsp",
            "Mgmt_NWK_Update_notify"
        ]
    },
    "NWK_addr_rsp": {
        "fields": {
            "Name": [
                "Status",
                "IEEEAddrRemoteDev",
                "NWKAddrRemoteDev",
                "NumAssocDev",
                "StartIndex",
                "NWKAddrAssocDevList"
            ],
            "Type": [
                "Integer",
                "Device Address",
                "Device Address",
                "Integer",
                "Integer",
                "Device Address List"
            ],
            "Valid Range": [
                "SUCCESS, INV_REQUESTTYPE,or DEVICENOTFOUND",
                "An extended 64-bit,IEEE address",
                "A 16-bit, NWK address",
                "0x00-0xff",
                "0x00-0xff",
                "List of NumAssocDev 16-bit short addresses, each with range 0x0000 - 0xffff"
            ],
            "Description": [
                "The status of the NWK_addr_req command.",
                "64-bit address for the Remote Device.",
                "16-bit address for the Remote Device.",
                "Count of the number of 16-bit short addresses to follow. If the RequestType in the request is Extended Response and there are no associated devices on the Remote Device, this field shall be set to 0. If an error occurs or the Request Type in the request is for a Single Device Response, this field shall not be included in the frame.",
                "Starting index into the list of associated devices for this report. If the RequestType in the request is Extended Response and there are no associated devices on the Remote Device, this field shall not be included in the frame. If an error occurs or the Request Type in the request is for a Single Device Response, this field shall not be included in the frame.",
                "A list of 16-bit addresses, one corresponding to each associated device to Remote Device; The number of 16-bit network addresses contained in this field is specified in the NumAssocDev field. If the RequestType in the request is Extended Response and there are no associated devices on the Remote Device, this field shall not be included in the frame. If an error occurs or the Request Type in the request is for a Single Device Response, this field shall not be included in the frame."
            ]
        },
        "When Generated ": "The NWK_addr_rsp is generated by a Remote Device in response to a NWK_addr_req command inquiring as to the NWK address of the Remote Device or the NWK address of an address held in the neighbor table (see section 2.4.3.1.1.2 for a detailed description). The destination addressing on this command is unicast. ",
        "Effect on Receipt ": "On receipt of the NWK_addr_rsp command, the recipient is either notified of the status of its attempt to discover a NWK address from an IEEE address or notified of an error. If the NWK_addr_rsp command is received with a Status of SUCCESS, the remaining fields of the command contain the appropriate discovery information, according to the RequestType as specified in the original NWK_Addr_req command. Otherwise, the Status field indicates the error and the NumAssocDev, StartIndex, and NWKAddrAssocDevList fields shall not be included. "
    },
    "IEEE_addr_rsp": {
        "fields": {
            "Name": [
                "Status",
                "IEEEAddrRemoteDev",
                "NWKAddrRemoteDev",
                "NumAssocDev",
                "StartIndex",
                "NWKAddrAssocDevList"
            ],
            "Type": [
                "Integer",
                "Device Address",
                "Device Address",
                "Integer",
                "Integer",
                "Device Address List"
            ],
            "Valid Range": [
                "SUCCESS, INV_REQUESTTYPE or DEVICE_NOT_FOUND",
                "An extended 64-bit,IEEE address",
                "A 16-bit, NWK address",
                "0x00-0xff",
                "0x00-0xff",
                "List of NumAssocDev 16-bit short addresses, each with range Ox0000-0xffff"
            ],
            "Description": [
                "The status of the IEEE_addr_req command.",
                "64-bit address for the Remote Device.",
                "16-bit address for the Remote Device.",
                "Count of the number of 16-bit short addresses to follow. If the RequestType in the request is Extended Response and there are no associated devices on the Remote Device, this field shall be set to 0. If an error occurs or the RequestType in the request is for a Single Device Response, this field shall not be included in the frame.",
                "Starting index into the list of associated devices for this report. If the RequestType in the request is Extended Response and there are no associated devices on the Remote Device, this field shall not be included in the frame. If an error occurs or the RequestType in the request is for a Single Device Response, this field shall not be included in the frame.",
                "A list of 16-bit addresses, one corresponding to each associated device to Remote Device; The number of 16-bit network addresses contained in this field is specified in the NumAssocDev field. If the RequestType in the request is Extended Response and there are no associated devices on the Remote Device, this field shall not be included in the frame. If an error occurs or the RequestType in the request is for a Single Device Response, this field shall not be included in the frame"
            ]
        },
        "When Generated ": "The IEEE_addr_rsp is generated by a Remote Device in response to an IEEE_addr_req command inquiring as to the 64-bit IEEE address of the Remote Device or the 64-bit IEEE address of an address held in a local discovery cache (see section 2.4.3.1.2.2 for a detailed description). The destination addressing on this command shall be unicast. ",
        "Effect on Receipt ": "On receipt of the IEEE_addr_rsp command, the recipient is either notified of the status of its attempt to discover an IEEE address from an NWK address or notified of an error. If the IEEE_addr_rsp command is received with a Status of SUCCESS, the remaining fields of the command contain the appropriate discovery information, according to the RequestType as specified in the original IEEE_Addr_req command. Otherwise, the Status field indicates the error and the NumAssocDev, StartIndex, and NWKAddrAssocDevList fields shall not be included. "
    },
    "Node_Desc_rsp": {
        "fields": {
            "Name": [
                "Status",
                "NWKAddrOfInterest",
                "NodeDescriptor"
            ],
            "Type": [
                "Integer",
                "Device Address",
                "Node Descriptor"
            ],
            "Valid Range": [
                "SUCCESS, DEVICE_NOT_FOUND, INV_REQUESTTYPE,or NO_DESCRIPTOR",
                "16-bit NWK address",
                ""
            ],
            "Description": [
                "The status of the Node_Desc_req command.",
                "NWK address for the request.",
                "See the Node Descriptor format in section 2.3.2.3.This field shall only be included in theframe if thestatusfield is equal to SUCCESS."
            ]
        },
        "When Generated ": "The Node_Desc_rsp is generated by a remote device in response to a Node_Desc_req directed to the remote device. This command shall be unicast to the originator of the Node_Desc_req command. The remote device shall generate the Node_Desc_rsp command using the format illustrated in Table 2.94 Fields of the Node_Desc_rsp Command. The NWKAddrOfInterest field shall match that specified in the original Node_Desc_req command. If the NWKAddrOfInterest field matches the network address of the remote device, it shall set the Status field to SUCCESS and include its node descriptor (see section 2.3.2.3) in the NodeDescriptor field. If the NWKAddrOfInterest field does not match the network address of the remote device and it is an end device, it shall set the Status field to INV_REQUESTTYPE and not include the NodeDescriptor field. If the NWKAddrOfInterest field does not match the network address of the remote device and it is the coordinator or a router, it shall determine whether the NWKAddrOfInterest field matches the network address of one of its children. If the NWKAddrOfInterest field does not match the network address of one of the children of the remote device, it shall set the Status field to DEVICE_NOT_FOUND and not include the NodeDescriptor field. If the NWKAddrOfInterest matches the network address of one of the children of the remote device, it shall determine whether a node descriptor for that device is available. If a node descriptor is not available for the child indicated by the NWKAddrOfInterest field, the remote device shall set the Status field to NO_DESCRIPTOR and not include the NodeDescriptor field. If a node descriptor is available for the child indicated by the NWKAddrOfInterest field, the remote device shall set the Status field to SUCCESS and include the node descriptor (see section 2.3.2.3) of the matching child device in the NodeDescriptor field. ",
        "Effect on Receipt ": "On receipt of the Node_Desc_rsp command, the recipient is either notified of the node descriptor of the remote device indicated in the original Node_Desc_req command or notified of an error. If the Node_Desc_rsp command is received with a Status of SUCCESS, the NodeDescriptor field shall contain the requested node descriptor. Otherwise, the Status field indicates the error and the NodeDescriptor field shall not be included. "
    },
    "Power_Desc_rsp": {
        "fields": {
            "Name": [
                "Status",
                "NWKAddrOfInterest",
                "PowerDescriptor"
            ],
            "Type": [
                "Integer",
                "Device Address",
                "Power Descriptor"
            ],
            "Valid Range": [
                "SUCCESS, DEVICE_NOT_FOUND, INV_REQUESTTYPE or NO_DESCRIPTOR",
                "16-bit NWK address",
                ""
            ],
            "Description": [
                "The status of the Power_Desc_req command.",
                "NWK address for the request.",
                "See the Node Power Descriptor format in section 2.3.2.4. This field shall only be included in the frame if the status field is equal to SUCCESS."
            ]
        },
        "When Generated ": "The Power_Desc_rsp is generated by a remote device in response to a Power_Desc_req directed to the remote device. This command shall be unicast to the originator of the Power_Desc_req command. The remote device shall generate the Power_Desc_rsp command using the format illustrated in Table 2.95. The NWKAddrOfInterest field shall match that specified in the original Power_Desc_req command. If the NWKAddrOfInterest field matches the network address of the remote device, it shall set the Status field to SUCCESS and include its power descriptor (see section 2.3.2.4) in the PowerDescriptor field. If the NWKAddrOfInterest field does not match the network address of the remote device and it is an end device, it shall set the Status field to INV_REQUESTTYPE and not include the PowerDescriptor field. If the NWKAddrOfInterest field does not match the network address of the remote device and it is the coordinator or a router, it shall determine whether the NWKAddrOfInterest field matches the network address of one of its children. If the NWKAddrOfInterest field does not match the network address of one of the children of the remote device, it shall set the Status field to DEVICE_NOT_FOUND and not include the PowerDescriptor field. If the NWKAddrOfInterest matches the network address of one of the children of the remote device, it shall determine whether a power descriptor for that device is available. If a power descriptor is not available for the child indicated by the NWKAddrOfInterest field, the remote device shall set the Status field to NO_DESCRIPTOR and not include the PowerDescriptor field. If a power descriptor is available for the child indicated by the NWKAddrOfInterest field, the remote device shall set the Status field to SUCCESS and include the power descriptor (see section 2.3.2.4) of the matching child device in the PowerDescriptor field. ",
        "Effect on Receipt ": "On receipt of the Power_Desc_rsp command, the recipient is either notified of the power descriptor of the remote device indicated in the original Power_Desc_req command or notified of an error. If the Power_Desc_rsp command is received with a Status of SUCCESS, the PowerDescriptor field shall contain the requested power descriptor. Otherwise, the Status field indicates the error and the PowerDescriptor field shall not be included. "
    },
    "Simple_Desc_rsp": {
        "fields": {
            "Name": [
                "Status",
                "NWKAddrOfInterest",
                "Length",
                "SimpleDescriptor"
            ],
            "Type": [
                "Integer",
                "Device Address",
                "Integer",
                "Simple Descriptor"
            ],
            "Valid Range": [
                "SUCCESS, INVALID_EP, NOT_ACTIVE, DEVICE_NOT_FOUND, INV_REQUESTTYPE or NO_DESCRIPTOR",
                "16-bit NWK address",
                "0x00-0xff",
                ""
            ],
            "Description": [
                "The status of the Simple_Desc_req command.",
                "NWK address for the request.",
                "Length in bytes of the Simple Descriptor to follow.",
                "See the Simple Descriptor format in section 2.3.2.5. This field shall only be included in the frame if the status field is equal to SUCCESS."
            ]
        },
        "When Generated ": "The Simple_Desc_rsp is generated by a remote device in response to a Simple_Desc_req directed to the remote device. This command shall be unicast to the originator of the Simple_Desc_req command. The remote device shall generate the Simple_Desc_rsp command using the format illustrated in Table 2.96. The NWKAddrOfInterest field shall match that specified in the original Simple_Desc_req command. If the endpoint field specified in the original Simple_Desc_req command does not fall within the correct range specified in Table 2.96 Fields of the Simple_Desc_req Command, the remote device shall set the Status field to INVALID_EP, set the Length field to 0 and not include the SimpleDescriptor field. If the NWKAddrOfInterest field matches the network address of the remote device, it shall determine whether the endpoint field specifies the identifier of an active endpoint on the device. If the endpoint field corresponds to an active endpoint, the remote device shall set the Status field to SUCCESS, set the Length field to the length of the simple descriptor on that endpoint, and include the simple descriptor (see section 2.3.2.5) for that endpoint in the SimpleDescriptor field. If the endpoint field does not correspond to an active endpoint, the remote device shall set the Status field to NOT_ACTIVE, set the Length field to 0, and not include the SimpleDescriptor field. If the NWKAddrOfInterest field does not match the network address of the remote device and it is an end device, it shall set the Status field to INV_REQUESTTYPE, set the Length field to 0, and not include the SimpleDescriptor field. If the NWKAddrOfInterest field does not match the network address of the remote device and it is the coordinator or a router, it shall determine whether the NWKAddrOfInterest field matches the network address of one of its children. If the NWKAddrOfInterest field does not match the network address of one of the children of the remote device, it shall set the Status field to DEVICE_NOT_FOUND, set the Length field to 0, and not include the SimpleDescriptor field. If the NWKAddrOfInterest matches the network address of one of the children of the remote device, it shall determine whether a simple descriptor for that device and on the requested endpoint is available. If a simple descriptor is not available on the requested endpoint of the child indicated by the NWKAddrOfInterest field, the remote device shall set the Status field to NO_DESCRIPTOR, set the Length field to 0, and not include the SimpleDescriptor field. If a simple descriptor is available on the requested endpoint of the child indicated by the NWKAddrOfInterest field, the remote device shall set the Status field to SUCCESS, set the Length field to the length of the simple descriptor on that endpoint, and include the simple descriptor (see section 2.3.2.5) for that endpoint of the matching child device in the SimpleDescriptor field. ",
        "Effect on Receipt ": "On receipt of the Simple_Desc_rsp command, the recipient is either notified of the simple descriptor on the endpoint of the remote device indicated in the original Simple_Desc_req command or notified of an error. If the Simple_Desc_rsp command is received with a Status of SUCCESS, the SimpleDescriptor field shall contain the requested simple descriptor. Otherwise, the Status field indicates the error and the SimpleDescriptor field shall not be included. "
    },
    "Active_EP_rsp": {
        "fields": {
            "Name": [
                "Status",
                "NWKAddrOfInterest",
                "ActiveEPCount",
                "ActiveEPList"
            ],
            "Type": [
                "Integer",
                "Device Address",
                "Integer",
                ""
            ],
            "Valid Range": [
                "SUCCESS, DEVICE_NOT_FOUND, INV_REQUESTTYPE or NO_DESCRIPTOR",
                "16-bit NWK address",
                "0x00-0xff",
                ""
            ],
            "Description": [
                "The status of the Active_EP_req command.",
                "NWK address for the request.",
                "The count of active endpoints on the Remote Device.",
                "List of bytes each of which represents an 8-bit endpoint."
            ]
        },
        "When Generated ": "The Active_EP_rsp is generated by a remote device in response to an Active_EP_req directed to the remote device. This command shall be unicast to the originator of the Active_EP_req command. The remote device shall generate the Active_EP_rsp command using the format illustrated in Table 2.97. The NWKAddrOfInterest field shall match that specified in the original Active_EP_req command. If the NWKAddrOfInterest field matches the network address of the remote device, it shall set the Status field to SUCCESS, set the ActiveEPCount field to the number of active endpoints on that device and include an ascending list of all the identifiers of the active endpoints on that device in the ActiveEPList field. If the NWKAddrOfInterest field does not match the network address of the remote device and it is an end device, it shall set the Status field to INV_REQUESTTYPE, set the ActiveEPCount field to 0, and not include the ActiveEPList field. If the NWKAddrOfInterest field does not match the network address of the remote device and it is the coordinator or a router, it shall determine whether the NWKAddrOfInterest field matches the network address of a device it holds in a discovery cache. If the NWKAddrOfInterest field does not match the network address of a device it holds in a discovery cache, it shall set the Status field to DEVICE_NOT_FOUND, set the ActiveEPCount field to 0, and not include the ActiveEPList field. If the NWKAddrOfInterest matches the network address of a device held in a discovery cache on the remote device, it shall determine whether that device has any active endpoints. If the discovery information corresponding to the ActiveEP request has not yet been uploaded to the discovery cache, the remote device shall set the Status field to NO_DESCRIPTOR, set the ActiveEPCount field to 0 and not include the ActiveEPList field. If the cached device has no active endpoints, the remote device shall set the Status field to SUCCESS, set the ActiveEPCount field to 0, and not include the ActiveEPList field. If the cached device has active endpoints, the remote device shall set the Status field to SUCCESS, set the ActiveEPCount field to the number of active endpoints on that device, and include an ascending list of all the identifiers of the active endpoints on that device in the ActiveEPList field. ",
        "Effect on Receipt ": "On receipt of the Active_EP_rsp command, the recipient is either notified of the active endpoints of the remote device indicated in the original Active_EP_req command or notified of an error. If the Active_EP_rsp command is received with a Status of SUCCESS, the ActiveEPCount field indicates the number of entries in the ActiveEPList field. Otherwise, the Status field indicates the error and the ActiveEPList field shall not be included. "
    },
    "Match_Desc_rsp": {
        "fields": {
            "Name": [
                "Status",
                "NWKAddrOfInterest",
                "MatchLength",
                "MatchList"
            ],
            "Type": [
                "Integer",
                "Device Address",
                "Integer",
                ""
            ],
            "Valid Range": [
                "SUCCESS, DEVICE_NOT_FOUND, INV_REQUESTTYPEor NO_DESCRIPTOR",
                "16-bit NWK address",
                "0x00-0xff",
                ""
            ],
            "Description": [
                "The status of the Match_Desc_req command.",
                "NWK address for the request.",
                "The count of endpoints on the RemoteDevice that match therequest criteria.",
                "List of bytes each of which represents an 8-bit endpoint."
            ]
        },
        "When Generated ": "The Match_Desc_rsp is generated by a remote device in response to a Match_Desc_req either broadcast or unicast to the remote device. This command shall be unicast to the originator of the Match_Desc_req command. The following describes the procedure for processing the Match_Desc_req and generation of Match_Desc_rsp. 1. Set MatchLength to 0 and create an empty list MatchList. 2. If the receiving device is an End Device and the NWKAddrOfInterest within the Match_Desc_req message does not match the nwkNetworkAddress of the NIB and is not a broadcast address, the following shall be performed.  Otherwise it shall proceed to step 3. a. If the NWK destination of the message is a broadcast address, no further processing shal be done.   \nb. If the NWK destination is a unicast address, the following shall be performed. i. Set the Status value to INV_REQUESTTYPE. ii. Set the MatchLength to 0. iii. Construct a Match_Desc_Rsp with only Status and MatchLength fields. iv. Send the message as a unicast to the source of the Match_Desc_req. v. No further processing shall be done. 3. If the NWKAddrOfInterest is equal to the nwkNetworkAddress of the NIB, or is a broadcast address, perform the following procedure.  Otherwise proceed to step 4. a. Apply the match criteria in section 2.4.4.2.7.1.1 for all local Simple Descriptors. b. For each Simple Descriptor that matches with at least one cluster, add the endpoint once to MatchList and increment MatchLength. 4. If the NWKAddrOfInterest is not a broadcast address, the NWKAddressOfInterest is not equal to the nwkNetworkAddress of the local NIB, and the device is a coordinator or router, then the following shall be performed.  Otherwise proceed to step 5. a. Examine each entry in the nwkNeighborTable and perform the following procedure. i. If the Network Address of the entry does not match the NWKAddrOfInterest or the Device Type is not equal to 0x02 (ZigBee End Device), do not process this entry. Continue to the next entry in the nwkNeighborTable. ii. If no cached Simple Descriptors for the device are available, skip this device and proceed to the next entry in the nwkNeighborTable. iii. Apply the match criteria in section 2.4.4.2.7.1.1 for each cached Simple Descriptor. iv. For each endpoint that matches with at least once cluster, add that endpoint once to the MatchList and increment MatchLength. v. Proceed to step 7. b. If the NWKAddrOfInterest does not match any entry in the nwkNeighborTable, perform the following: i. Set the Status to DEVICE_NOT_FOUND.   \nii. Construct a Match_Desc_Rsp with Status and MatchLength fields only.   \niii. Unicast the message to the source of the Match_Desc_req.   \niv. No further processing shall take place. 5. If the MatchLength is 0 and the NWK destination of the Match_Desc_Req was a broadcast address, no further processing shall be done.  Otherwise proceed to step 6. 6. If the MatchLength is 0 and the NWKAddrOfInterest matched an entry in the nwkNeighborTable, the following shall be performed.  Otherwise proceed to step 7. a. Set the Status to NO_DESCRIPTOR   \nb. Construct a Match_Desc_Rsp with Status and MatchLength only. c. Unicast the Match_Desc_Rsp to the source of the Match_Desc_Req. d. No further processing shall be done. 7. The following shall be performed.  This is the case for both MatchLength $>0$ and MatchLength $ ==0$ . a. Set the Status to SUCCESS.   \nb. Construct a Match_Desc_Rsp with Status, NWKAddrOfInterest, MatchLength, and MatchList.   \nc. Unicast the response to the NWK source of the Match_Desc_Req. ",
        "Effect on Receipt ": "On receipt of the Match_Desc_rsp command, the recipient is either notified of the results of its match criterion query indicated in the original Match_Desc_req command or notified of an error. If the Match_Desc_rsp command is received with a Status of SUCCESS, the MatchList field shall contain the list of endpoints containing simple descriptors that matched the criterion. Otherwise, the Status field indicates the error and the MatchList field shall not be included. "
    },
    "Complex_Desc_rsp": {
        "fields": {
            "Name": [
                "Status",
                "NWKAddrOfInterest",
                "Length",
                "ComplexDescriptor"
            ],
            "Type": [
                "Integer",
                "Device Address",
                "Integer",
                "Complex Descriptor"
            ],
            "Valid Range": [
                "SUCCESS, NOT_SUPPORTED, DEVICE_NOT_FOUND, INV_REQUESTTYPEor NO_DESCRIPTOR",
                "16-bitNWK address",
                "0x00-0xff",
                ""
            ],
            "Description": [
                "The status of the Complex_Desc_req command.",
                "NWK addressfor therequest.",
                "Length in bytes of the ComplexDescriptor field.",
                "See the Complex Descriptor format in section 2.3.2.6.This field shall only be included in the frame if the status field is equal to SUCCESS."
            ]
        },
        "When Generated ": "The Complex_Desc_rsp is generated by a remote device in response to a Complex_Desc_req directed to the remote device. This command shall be unicast to the originator of the Complex_Desc_req command. The remote device shall generate the Complex_Desc_rsp command using the format illustrated in Table 2.99. The NWKAddrOfInterest field shall match that specified in the original Complex_Desc_req command. If the NWKAddrOfInterest field matches the network address of the remote device but a complex descriptor does not exist, it shall set the Status field to NOT_SUPPORTED, set the Length field to 0, and not include the ComplexDescriptor field. If the NWKAddrOfInterest field matches the network address of the remote device and a complex descriptor exists, it shall set the Status field to SUCCESS, set the Length field to the length of the complex descriptor, and include its complex descriptor (see section 2.3.2.6Complex Descriptor) in the ComplexDescriptor field. If the NWKAddrOfInterest field does not match the network address of the remote device and it is an end device, it shall set the Status field to INV_REQUESTTYPE, set the Length field to 0, and not include the ComplexDescriptor field. If the NWKAddrOfInterest field does not match the network address of the remote device and it is the coordinator or a router, it shall determine whether the NWKAddrOfInterest field matches the network address of one of its children. If the NWKAddrOfInterest field does not match the network address of one of the children of the remote device, it shall set the Status field to DEVICE_NOT_FOUND, set the Length field to 0, and not include the ComplexDescriptor field. If the NWKAddrOfInterest matches the network address of one of the children of the remote device, it shall determine whether a complex descriptor for that device is available. If a complex descriptor is not available for the child indicated by the NWKAddrOfInterest field, the remote device shall set the Status field to NO_DESCRIPTOR, set the Length field to 0, and not include the ComplexDescriptor field. If a complex descriptor is available for the child indicated by the NWKAddrOfInterest field, the remote device shall set the Status field to SUCCESS, set the Length field to the length of the complex descriptor for that device, and include the complex descriptor (see section 2.3.2.6) of the matching child device in the ComplexDescriptor field. ",
        "Effect on Receipt ": "On receipt of the Complex_Desc_rsp command, the recipient is either notified of the complex descriptor of the remote device indicated in the original Complex_Desc_req command or notified of an error. If the Complex_Desc_rsp command is received with a Status of SUCCESS, the ComplexDescriptor field shall contain the requested complex descriptor. Otherwise, the Status field indicates the error and the ComplexDescriptor field shall not be included. "
    },
    "User_Desc_rsp": {
        "fields": {
            "Name": [
                "Status",
                "NWKAddrOfInterest",
                "Length",
                "UserDescriptor"
            ],
            "Type": [
                "Integer",
                "Device Address",
                "Integer",
                "User Descriptor"
            ],
            "Valid Range": [
                "SUCCESS, NOT_SUPPORTED, DEVICE_NOT_FOUND, INV_REQUESTTYPE or NO_DESCRIPTOR",
                "16-bit NWK address",
                "0x00-0x10",
                ""
            ],
            "Description": [
                "The status of the User_Desc_req command.",
                "NWK address for the request.",
                "Length in bytes of the UserDescriptor field.",
                "See the User Descriptor format in section 2.3.2.7. This field shall only be included in the frame if the status field is equal to SUCCESS."
            ]
        },
        "When Generated ": "The User_Desc_rsp is generated by a remote device in response to a User_Desc_req directed to the remote device. This command shall be unicast to the originator of the User_Desc_req command. The remote device shall generate the User_Desc_rsp command using the format illustrated in Table 2.100. The NWKAddrOfInterest field shall match that specified in the original User_Desc_req command. If the NWKAddrOfInterest field matches the network address of the remote device but a user descriptor does not exist, it shall set the Status field to NO_DESCRIPTOR, set the Length field to 0, and not include the UserDescriptor field. If the NWKAddrOfInterest field matches the network address of the remote device and a user descriptor exists, it shall set the Status field to SUCCESS, set the Length field to the length of the user descriptor, and include its user descriptor (see section 2.3.2.7) in the UserDescriptor field. If the NWKAddrOfInterest field does not match the network address of the remote device and it is an end device, it shall set the Status field to INV_REQUESTTYPE, set the Length field to 0, and not include the UserDescriptor field. If the NWKAddrOfInterest field does not match the network address of the remote device and it is the coordinator or a router, it shall determine whether the NWKAddrOfInterest field matches the network address of one of its children. If the NWKAddrOfInterest field does not match the network address of one of the children of the remote device, it shall set the Status field to DEVICE_NOT_FOUND, set the Length field to 0, and not include the UserDescriptor field. If the NWKAddrOfInterest matches the network address of one of the children of the remote device, it shall determine whether a user descriptor for that device is available. If a user descriptor is not available for the child indicated by the NWKAddrOfInterest field, the remote device shall set the Status field to NO_DESCRIPTOR, set the Length field to 0, and not include the UserDescriptor field. If a user descriptor is available for the child indicated by the NWKAddrOfInterest field, the remote device shall set the Status field to SUCCESS, set the Length field to the length of the user descriptor for that device, and include the user descriptor (see section 2.3.2.7) of the matching child device in the UserDescriptor field. ",
        "Effect on Receipt ": "On receipt of the User_Desc_rsp command, the recipient is either notified of the user descriptor of the remote device indicated in the original User_Desc_req command or notified of an error. If the User_Desc_rsp command is received with a Status of SUCCESS, the UserDescriptor field shall contain the requested user descriptor. Otherwise, the Status field indicates the error and the UserDescriptor field shall not be included. "
    },
    "System_Server_Discovery_rsp": {
        "fields": {
            "Name": [
                "Status",
                "ServerMask"
            ],
            "Type": [
                "Integer",
                "Integer"
            ],
            "ValidRange": [
                "SUCCESS",
                "Bitmap"
            ],
            "Description": [
                "The status of the System_Server_Discovery_rsp command.",
                "SeeTable2.32forbitassignments."
            ]
        },
        "When Generated ": "The System_Server_Discovery_rsp is generated from Remote Devices on receipt of a System_Server_ Discovery_req primitive if the parameter matches the Server Mask field in its node descriptor. If there is no match, the System_Server_Discovery_req shall be ignored and no response given. Matching is performed by masking the ServerMask parameter of the System_Server_Discovery_req with the Server Mask field in the node descriptor. This command shall be unicast to the device which sent System_Server_Discovery_req with Acknowledge request set in TxOptions. The parameter ServerMask contains the bits in the parameter of the request which match the server mask in the node descriptor. ",
        "Effect on Receipt ": "The requesting device is notified that this device has some of the system server functionality that the requesting device is seeking. If the Network Manager bit was set in the System_Server_Discovery_rsp, then the Remote Device’s NWK address shall be set into the nwkManagerAddr of the NIB. "
    },
    "User_Desc_conf": {
        "fields": {
            "Name": [
                "Status",
                "NWKAddrOfInterest"
            ],
            "Type": [
                "Integer",
                "Device Address"
            ],
            "Valid Range": [
                "SUCCESS, NOT_SUPPORTED, DEVICENOT_FOUND, INV_REQUESTTYPE or NO_DESCRIPTOR",
                "Any 16-bit NWK address"
            ],
            "Description": [
                "The status of the User_Desc_set command.",
                "The network address of the device on which the user descriptor set attempt was made."
            ]
        },
        "When Generated ": "The User_Desc_conf is generated by a remote device in response to a User_Desc_set directed to the remote device. This command shall be unicast to the originator of the User_Desc_set command. The remote device shall generate the User_Desc_conf command using the format illustrated in Table 2.102. The NWKAddrOfInterest field shall match that specified in the original User_Desc_set command. If the NWKAddrOfInterest field matches the network address of the remote device but a user descriptor does not exist, it shall set the Status field to NOT_SUPPORTED. If the NWKAddrOfInterest field matches the network address of the remote device and a user descriptor exists, it shall set the Status field to SUCCESS and configure the user descriptor with the ASCII character string specified in the original User_Desc_set command. If the NWKAddrOfInterest field does not match the network address of the remote device and it is an end device, it shall set the Status field to INV_REQUESTTYPE. If the NWKAddrOfInterest field does not match the network address of the remote device and it is the coordinator or a router, it shall determine whether the NWKAddrOfInterest field matches the network address of one of its children. If the NWKAddrOfInterest field does not match the network address of one of the children of the remote device, it shall set the Status field to DEVICE_NOT_FOUND. If the NWKAddrOfInterest matches the network address of one of the children of the remote device, it shall determine whether a user descriptor for that device is available. If a user descriptor is not available for the child indicated by the NWKAddrOfInterest field, the remote device shall set the Status field to NO_DESCRIPTOR. If a user descriptor is available for the child indicated by the NWKAddrOfInterest field, the remote device shall set the Status field to SUCCESS and configure the user descriptor with the ASCII character string specified in the original User_Desc_set command. ",
        "Effect on Receipt ": "The local device is notified of the results of its attempt to configure the user descriptor on a remote device. "
    },
    "Discovery_Cache_rsp": {
        "fields": {
            "Name": [
                "Status"
            ],
            "Type": [
                "Integer"
            ],
            "ValidRange": [
                "SUCCESS"
            ],
            "Description": [
                "The status of the Discovery_Cache_req command."
            ]
        },
        "When Generated ": "The Discovery_Cache_rsp is generated by Primary Discovery Cache devices receiving the Discovery_Cache_req. Remote Devices which are not Primary Discovery Cache devices (as designated in its Node Descriptor) should not respond to the Discovery_Cache_req command. ",
        "Effect on Receipt ": "Upon receipt of the Discovery_Cache_rsp, the Local Device determines if a SUCCESS status was returned. If no Discovery_Cache_rsp messages were returned from the original Discovery_Cache_req command, then the Local Device should increase the radius for the request to locate Primary Discovery Cache devices beyond the radius supplied in the previous request. If a SUCCESS status is returned, the Local Device should use the Discovery_Store_req, targeted to the Remote Device supplying the response, to determine whether sufficient discovery cache storage is available. "
    },
    "Discovery_store_rsp": {
        "fields": {
            "Name": [
                "Status"
            ],
            "Type": [
                "Integer"
            ],
            "ValidRange": [
                "SUCCESS INSUFFICIENT_SPACEor NOT_SUPPORTED"
            ],
            "Description": [
                "Thestatusofthe Discovery_store_req command."
            ]
        },
        "When Generated ": "The Discovery_store_rsp is provided to notify a Local Device of the request status from a Primary Discovery Cache device. Included in the response is a status code to notify the Local Device whether the request is successful (the Primary Cache Device has space to store the discovery cache data for the Local Device), whether the request is unsupported (meaning the Remote Device is not a Primary Discovery Cache device), or insufficient space exists. ",
        "Effect on Receipt ": "Upon receipt, the Local Device shall determine whether the response status indicates that the Remote Device is not a Primary Cache Device as indicated by a NOT_SUPPORTED status. If a NOT_SUPPORTED status is returned, the Local Device should process any other Discovery_store_rsp devices from other Remote Devices or re-perform the Discovery_Cache_req to determine the address of another Primary Discovery Cache device (eliminating the address of the Remote Device that responded with NOT_SUPPORTED if it responds again to the Discovery_Cache_req). If an INSUFFICIENT_SPACE status is returned, the Local Device should also process any other Discovery_store_rsp and re-perform the Discovery_Cache_req if none of the responses indicate SUCCESS (with the radius field increased to include more Remote Devices). If a   \nSUCCESS status is returned, the Local Device shall upload its discovery cache information to the Remote Device via the Node_Desc_store_req, Power_Desc_store_req, Active_EP_store_req, and   \nSimple_Desc_store_req. "
    },
    "Node_Desc_store_rsp": {
        "fields": {
            "Name": [
                "Status"
            ],
            "Type": [
                "Integer"
            ],
            "ValidRange": [
                "SUCCESS, INSUFFICIENT_SPACE NOT_PERMITTEDor NOTSUPPORTED"
            ],
            "Description": [
                "The status of the Node_store_rsp command."
            ]
        },
        "When Generated ": "The Node_store_rsp is provided to notify a Local Device of the request status from a Primary Discovery Cache device. Included in the response is a status code to notify the Local Device whether the request is successful (the Primary Cache Device has space to store the discovery cache data for the Local Device), whether the request is not supported (meaning the Remote Device is not a Primary Discovery Cache device), or insufficient space exists. ",
        "Effect on Receipt ": "Upon receipt, the Local Device shall determine whether the response status indicates that the Remote Device is not a Primary Cache Device as indicated by a NOT_SUPPORTED status. If a NOT_SUPPORTED status is returned, the Local Device should re-perform discovery of the Primary Discovery Cache device. If a NOT_PERMITTED status is returned, the local device must first issue a Discovery_store_req with a returned SUCCESS status. If an INSUFFICIENT_SPACE status is returned, the Local Device shall also send the Remote Device a Remove_node_cache_req. If a SUCCESS status is returned, the Local Device should continue to upload its remaining discovery cache information to the Remote Device via the Power_Desc_store_req, Active_EP_store_req, and Simple_Desc_store_req. "
    },
    "Power_Desc_store_rsp": {
        "fields": {
            "Name": [
                "Status"
            ],
            "Type": [
                "Integer"
            ],
            "ValidRange": [
                "SUCCESS INSUFFICIENT_SPACE NOT_PERMITTEDor NOT_SUPPORTED"
            ],
            "Description": [
                "The status of the Power_store_rsp command."
            ]
        },
        "When Generated ": "The Power_Desc_store_rsp is provided to notify a Local Device of the request status from a Primary Discovery Cache device. Included in the response is a status code to notify the Local Device whether the request is successful (the Primary Cache Device has space to store the discovery cache data for the Local Device), whether the request is not supported (meaning the Remote Device is not a Primary Discovery Cache device), or insufficient space exists. ",
        "Effect on Receipt ": "Upon receipt, the Local Device shall determine whether the response status indicates that the Remote Device is not a Primary Cache Device as indicated by a NOT_SUPPORTED status. If a NOT_SUPPORTED status is returned, the Local Device should re-perform discovery on the Primary Discovery Cache. If a NOT_PERMITTED status is returned, the local device must first issue a Discovery_store_req with a returned SUCCESS status. If an INSUFFICIENT_SPACE status is returned, the Local Device shall discontinue upload of discovery information, issue a Remove_node_cache_req (citing the Local Device), and cease attempts to upload discovery information to the Remote Device. If a SUCCESS status is returned, the Local Device should continue to upload its remaining discovery cache information to the Remote Device via the Active_EP_store_req and Simple_Desc_store_req. "
    },
    "Active_EP_store_rsp": {
        "fields": {
            "Name": [
                "Status"
            ],
            "Type": [
                "Integer"
            ],
            "ValidRange": [
                "SUCCESS, INSUFFICIENT_SPACE NOT_PERMITTEDor NOT_SUPPORTED"
            ],
            "Description": [
                "The status of the Active_EP_store_rsp command."
            ]
        },
        "When Generated ": "The Active_EP_store_rsp is provided to notify a Local Device of the request status from a Primary Discovery Cache device. Included in the response is a status code to notify the Local Device whether the request is successful (the Primary Cache Device has space to store the discovery cache data for the Local Device), the request is not supported (meaning the Remote Device is not a Primary Discovery Cache device), or insufficient space exists. ",
        "Effect on Receipt ": "Upon receipt, the Local Device shall determine whether the response status indicates that the Remote Device is not a Primary Cache Device as indicated by a NOT_SUPPORTED status. If a NOT_SUPPORTED status is returned, the Local Device should re-perform discovery on the Primary Discovery Cache. If a NOT_PERMITTED status is returned, the local device must first issue a Discovery_store_req with a returned SUCCESS status. If an INSUFFICIENT_SPACE status is returned, the Local Device shall discontinue upload of discovery information, issue a Remove_node_cache_req (citing the Local Device), and cease attempts to upload discovery information to the Remote Device. If a SUCCESS status is returned, the Local Device should continue to upload its remaining discovery cache information to the Remote Device via the Simple_Desc_store_req. "
    },
    "Simple_Desc_store_rsp": {
        "fields": {
            "Name": [
                "Status"
            ],
            "Type": [
                "Integer"
            ],
            "Valid Range": [
                "SUCCESS, INSUFFICIENT_SPACE NOT_PERMITTEDor NOT_SUPPORTED"
            ],
            "Description": [
                "Thestatusofthe Simple_desc_store_rsp command."
            ]
        },
        "When Generated ": "The Simple_Desc_store_rsp is provided to notify a Local Device of the request status from a Primary Discovery Cache device. Included in the response is a status code to notify the Local Device whether the request is successful (the Primary Cache Device has space to store the discovery cache data for the Local Device), the request is not supported (meaning the Remote Device is not a Primary Discovery Cache device), or insufficient space exists. ",
        "Effect on Receipt ": "Upon receipt, the Local Device shall determine whether the response status indicates that the Remote Device is not a Primary Cache Device as indicated by a NOT_SUPPORTED status. If a NOT_SUPPORTED status is returned, the Local Device should re-perform discovery on the Primary Discovery Cache. If a NOT_PERMITTED status is returned, the local device must first issue a Discovery_store_req with a returned SUCCESS status. If an INSUFFICIENT_SPACE status is returned, the Local Device shall discontinue upload of discovery information, issue a Remove_node_cache_req (citing the Local Device), and cease attempts to upload discovery information to the Remote Device. If a SUCCESS status is returned, the Local Device should continue to upload its remaining discovery cache information to the Remote Device via the Simple_Desc_store_req for other endpoints on the Local Device. "
    },
    "Remove_node_cache_rsp": {
        "fields": {
            "Name": [
                "Status"
            ],
            "Type": [
                "Integer"
            ],
            "ValidRange": [
                "SUCCESS DEVICE_NOT_FOUNDor NOT_SUPPORTED"
            ],
            "Description": [
                "Thestatusofthe Remove_node_cache_rsp command"
            ]
        },
        "When Generated ": "The Remove_node_cache_rsp is provided to notify a Local Device of the request status from a Primary Discovery Cache device. Included in the response is a status code to notify the Local Device whether the request is successful (the Primary Cache Device has removed the discovery cache data for the indicated device of interest), or the request is not supported (meaning the Remote Device is not a Primary Discovery Cache device). ",
        "Effect on Receipt ": "Upon receipt, the Local Device shall determine whether the response status indicates that the Remote Device is not a Primary Cache Device as indicated by a NOT_SUPPORTED status. If a NOT_SUPPORTED status is returned, the Local Device should re-perform Find_node_cache_req to locate the Primary Discovery Cache device holding the discovery cache information for the indicated device of interest. When the Primary Discovery Cache device holding the discovery information for the device of interest is located, the Local Device should repeat the Remove_node_cache_req to successfully remove the discovery information. If a status of DEVICE_NOT_FOUND is received, this indicates that the Remote Device is the Primary Discovery Cache but does not hold the discovery information for the NWKAddr and the IEEEAddr presented in the request. The Local Device should employ the device discovery commands NWK_Addr_req and IEEE_Addr_req to determine the correct values for NWKAddr and IEEEAddr. If a SUCCESS status is returned, the Local Device has successfully removed the discovery cache information for the indicated device of interest within the request. "
    },
    "Find_node_cache_rsp": {
        "fields": {
            "Name": [
                "CacheNWKAddr",
                "NWKAddr",
                "IEEEAddr"
            ],
            "Type": [
                "Device Address",
                "Device Address",
                "Device Address"
            ],
            "Valid Range": [
                "16-bitNWKAddress",
                "16-bit NWK Address",
                "64-bitIEEEAddress"
            ],
            "Description": [
                "NWK Address for the Primary Discovery Cache device holding the discovery information (or the device of interest if it responded to the request directly).",
                "NWK Address for the device of interest.",
                "IEEE address for the device of interest."
            ]
        },
        "When Generated ": "The Find_node_cache_rsp is provided to notify a Local Device of the successful discovery of the Primary Discovery Cache device for the given NWKAddr and IEEEAddr fields supplied in the request, or to signify that the device of interest is capable of responding to discovery requests. The Find_node_cache_rsp shall be generated only by Primary Discovery Cache devices holding discovery information for the NWKAddr and IEEEAddr in the request or the device of interest itself and all other Remote Devices shall not supply a response. ",
        "Effect on Receipt ": "Upon receipt, the Local Device shall utilize the CacheNWKAddr as the Remote Device address for subsequent discovery requests relative to the NWKAddr and IEEEAddr in the response. "
    },
    "Extended_Simple_Desc_rsp": {
        "fields": {
            "Name": [
                "Status",
                "NWKAddrOfInterest",
                "Endpoint",
                "AppInputClusterCount",
                "AppOutputClusterCount",
                "StartIndex",
                "AppClusterList"
            ],
            "Type": [
                "Integer",
                "Device Address",
                "8 bits",
                "8 bits",
                "8 bits",
                "8 bits",
                ""
            ],
            "Valid Range": [
                "SUCCESS, INVALID_EP, NOT_ACTIVE, DEVICE_NOT_FOUND, INV_REQUESTTYPEor",
                "16-bit NWK address",
                "1-254",
                "0x00-0xff",
                "0x00-0xff",
                "0x00-0xff",
                ""
            ],
            "Description": [
                "The status of the Extended_Simple_Desc_req command.",
                "NWK address for the request.",
                "The endpoint on the destination.",
                "The total count of application input clusters in the Simple Descriptor for this endpoint.",
                "The total count of application output clusters in the Simple Descriptor for this endpoint.",
                "Starting index within the AppClusterList of the response represented by an ordered list of the Application Input Cluster List and Application Output Cluster List from the Simple Descriptor for this endpoint.",
                "A concatenated,orderedlist of the AppInputClusterList and AppOutputClusterList, beginning withStartIndex,from theSimple Descriptor. This field shall only be included in the frame if the status field is equal to SUCCESS."
            ]
        },
        "When Generated ": "The Extended_Simple_Desc_rsp is generated by a remote device in response to an Extended_Simple_Desc_req directed to the remote device. This command shall be unicast to the originator of the Extended_Simple_Desc_req command. The remote device shall generate the Extended_Simple_Desc_rsp command using the format illustrated in Table 2.111. The NWKAddrOfInterest field shall match that specified in the original Extended_Simple_Desc_req command. If the endpoint field specified in the original Extended_Simple_Desc_req command does not fall within the correct range specified in Table 2.50, the remote device shall set the Status field to INVALID_EP, set the Endpoint and StartIndex fields to their respective values supplied in the request, and not include the AppClusterList field. If the NWKAddrOfInterest field matches the network address of the remote device, it shall determine whether the endpoint field specifies the identifier of an active endpoint on the device. If the endpoint field corresponds to an active endpoint, the remote device shall set the Status field to SUCCESS, set the AppClusterList field to the sequence of octets from the concatenated AppInput ClusterList and AppOutputClusterList from the Simple Descriptor (see clause 2.3.2.3), and supply that field as AppClusterList in the response. Note that dependent on the value of StartIndex in the request, the results in AppClusterList may be empty (for example, the StartIndex begins after the sequence of octets given by the concatenation of AppInputClusterList and   \nAppOutputClusterList). If the endpoint field does not correspond to an active endpoint, the remote device shall set the Status field to NOT_ACTIVE, set the StartIndex field to the value supplied in the request, and not include the AppClusterList field. ",
        "Effect on Receipt ": "On receipt of the Extended_Simple_Desc_rsp command, the recipient is either notified of the requested AppClusterList on the endpoint of the remote device indicated in the original Extended_Simple_Desc_req command or notified of an error. If the Extended_Simple_Desc_rsp command is received with a Status of SUCCESS, the AppClusterList field shall contain the requested portion of the application input cluster list and application output cluster list, starting with the StartIndex. Otherwise, the Status field indicates the error and the AppClusterList field shall not be included. "
    },
    "Extended_Active_EP_rsp": {
        "fields": {
            "Name": [
                "Status",
                "NWKAddrOfInterest",
                "ActiveEPCount",
                "StartIndex",
                "ActiveEPList"
            ],
            "Type": [
                "Integer",
                "Device Address",
                "Integer",
                "Integer",
                ""
            ],
            "Valid Range": [
                "SUCCESS, DEVICE_NOT_FOUND, INV_REQUESTTYPE or NO_DESCRIPTOR",
                "16-bit NWK address",
                "0x00-0xff",
                "0x00-0xff",
                ""
            ],
            "Description": [
                "The status of the Extended_Active_EP_req command.",
                "NWK address for the request.",
                "The count of active endpoints on the Remote Device.",
                "Starting index for the list of active endpoints for this report.",
                "List of bytes each of which represents an 8-bit endpoint. The list begins with the entry starting with StartIndex and continues until the remaining active endpoints are listed or the ASDU size is exhausted with whole endpoint entries."
            ]
        },
        "When Generated ": "The Extended_Active_EP_rsp is generated by a remote device in response to an Extended_Active_EP_req directed to the remote device. This command shall be unicast to the originator of the Extended_Active_EP_req command. The remote device shall generate the Extended_Active_EP_rsp command using the format illustrated in Table 2.111. The NWKAddrOfInterest field shall match that specified in the original Extended_Active_EP_req command. If the NWKAddrOfInterest field matches the network address of the remote device, it shall set the Status field to SUCCESS, set the ActiveEPCount field to the number of active endpoints on that device, and include an ascending list of all the identifiers of the active endpoints, beginning with StartIndex, on that device in the ActiveEPList field and continuing until the remaining list of active endpoints from StartIndex forward is listed or until the ASDU size is exhausted with whole endpoint entries. If the NWKAddrOfInterest field does not match the network address of the remote device and it is an end device, it shall set the Status field to INV_REQUESTTYPE, set the ActiveEPCount field to 0, and not include the ActiveEPList field. If the NWKAddrOfInterest field does not match the network address of the remote device and it is the coordinator or a router, it shall determine whether the NWKAddrOfInterest field matches the network address of a device it holds in a discovery cache. If the NWKAddrOfInterest field does not match the network address of a device it holds in a discovery cache, it shall set the Status field to DEVICE_NOT_FOUND, set the ActiveEPCount field to 0, and not include the ActiveEPList field. If the NWKAddrOfInterest matches the network address of a device held in a discovery cache on the remote device, it shall determine whether that device has any active endpoints. If the discovery information corresponding to the ActiveEP request has not yet been uploaded to the discovery cache, the remote device shall set the Status field to NO_DESCRIPTOR, set the ActiveEPCount field to 0, and not include the ActiveEPList field. If the cached device has no active endpoints, the remote device shall set the Status field to SUCCESS, set the ActiveEPCount field to 0, and not include the ActiveEPList field. If the cached device has active endpoints, the remote device shall set the Status field to SUCCESS, set the ActiveEPCount field to the number of active endpoints on that device and include an ascending list of all the identifiers of the active endpoints, beginning with StartIndex, on that device in the ActiveEPList field. ",
        "Effect on Receipt ": "On receipt of the Extended_Active_EP_rsp command, the recipient is either notified of the active endpoints of the remote device indicated in the original Extended_Active_EP_req command or notified of an error. If the Extended_Active_EP_rsp command is received with a Status of SUCCESS, the ActiveEPCount field indicates the number of entries in the ActiveEPList field. Otherwise, the Status field indicates the error and the ActiveEPList field shall not be included. The requesting device may need to employ Extended_Active_EP_req multiple times, with different StartIndex values, to receive the full ActiveEPList from the remote device. "
    },
    "Parent_annce_rsp": {
        "fields": {
            "Name": [
                "Status",
                "NumberOfChildren",
                "ChildInfo"
            ],
            "Type": [
                "Integer",
                "Integer",
                "ChildInfo"
            ],
            "Valid Range": [
                "SUCCESS, NOT_SUPPORTED, NO_MATCH",
                "0-255",
                "Variable"
            ],
            "Description": [
                "Thestatus of the Parent_annce command.",
                "Thenumber of ChildInfostructures contained in the message.",
                "The child information.See Table 2.57."
            ]
        },
        "When Generated ": "Upon receipt of a Parent_annce message, a router shall construct but not yet send a Parent_annce_rsp message with the NumberOfChildren field set to 0.  It shall then examine each Extended Address present in the Parent_annce message and search its Neighbor Table for an entry that matches. If a device is found and the Device Type is ZigBee end device (0x02), the router shall do the following. 1. If the Keepalive Received value is TRUE, it shall keep the parent/child relationship in the neighbor table unmodified.  It shall then do the following: a. Append the ChildInfo structure to the Parent_annce_rsp. b. Increment NumberOfChildren by 1. 2. If the Keepalive Received value is FALSE, it shall remove the entry. If the NumberOfChildren field value is 0, the local device shall discard the previously constructed Parent_Annce_rsp.  No response message shall be sent. If the NumberOfChildren field in the Parent_Annce_rsp is greater than 0, it shall unicast the message to the sender of the Parent_Annce message. If the device has more ChildInfo entries than fit in a single message, it shall send additional messages. These messages do not have to be jittered or delayed since they are unicast to a single device.  Each Parent_annce_rsp shall set the NumberOfChildren field to the number of entries contained within the message. ",
        "Effect on Receipt ": "On receipt of a Parent_annce_rsp, the device shall examine its Neighbor Table for each extended address in the ChildInfo entry and do the following. i) If the entry matches and the Device Type is Zigbee End Device (0x02), it shall do the following: (1) Delete the entry from the Neigbor table.   \nii) If the entry does not match, no more processing is performed on this ChildInfo entry.   \nThere is no message generated in response to a Parent_annce_rsp. "
    },
    "End_Device_Bind_rsp": {
        "fields": {
            "Name": [
                "Status"
            ],
            "Type": [
                "Integer"
            ],
            "ValidRange": [
                "SUCCESS,NOT_SUPPORTED INVALID_EP,TIMEOUT,NO_MATCH or DEVICE_BINDING_TABLE_FULL"
            ],
            "Description": [
                "Thestatusofthe End_Device_Bind_req command"
            ]
        },
        "When Generated ": "The End_Device_Bind_rsp is generated by the ZigBee Coordinator in response to an End_Device_Bind_req and contains the status of the request. This command shall be unicast to each device involved in the bind attempt, using the acknowledged data service. A Status of NOT_SUPPORTED indicates that the request was directed to a device which was not the ZigBee Coordinator or that the ZigBee Coordinator does not support End Device Binding. Otherwise, End_Device_Bind_req processing is performed as described below, including transmission of the End_Device_Bind_rsp. ",
        "Effect on Receipt ": "When an End_Device_Bind_req is received, determination is made if a Status of NOT_SUPPORTED is warranted as indicated in the previous section. Assuming this device is the ZigBee Coordinator, the supplied endpoint shall be checked to determine whether it falls within the specified range. If it does not, a Status of INVALID_EP shall be returned. If the supplied endpoint falls within the specified range and if this is the first End_Device_Bind_req submitted for evaluation, it shall be stored and a timer started which expires at a pre-configured timeout value. This timeout value shall be a configurable item on the ZigBee Coordinator. If the timer expires before a second End_Device_Bind_req is received, a Status of TIMEOUT is returned. Otherwise, if a second End_Device_Bind_req is received within the timeout window, the two End_Device_Bind_req's are compared for a match. A Status of NO_MATCH indicates that two End_Device_Bind_req were evaluated for a match, but either the ProfileID parameters did not match (see section 2.3.3.2.2) or the ProfileID parameter matched but there was no match of any element of the InClusterList or OutClusterList. A Status of SUCCESS means that a match was detected and a resulting Bind_req will subsequently be directed to the device indicated by the BindingTarget field of the End_Device_Bind_req with matched elements of the OutClusterList. "
    },
    "Bind_rsp": {
        "fields": {
            "Name": [
                "Status"
            ],
            "Type": [
                "Integer"
            ],
            "Valid Range": [
                "SUCCESS. NOT_SUPPORTED, INVALID_EP,TABLE_FULL or NOTAUTHORIZED"
            ],
            "Description": [
                "The status of the Bind_req command."
            ]
        },
        "When Generated ": "The Bind_rsp is generated in response to a Bind_req. If the Bind_req is processed and the Binding Table entry committed on the Remote Device, a Status of SUCCESS is returned. If the Remote Device is not a Primary binding table cache or the SrcAddress, a Status of NOT_SUPPORTED is returned. The Simple Descriptor in the receiving device correlating to the endpoint in the Bind_req shall be looked up.  If the Simple Descriptor cannot be found then INVALID_EP shall be returned.  If the Simple Descriptor is found, it shall be examined to see if the value of the ClusterID field in the Bind_Req message can be found within the Application output cluster list of the Simple Descriptor.  If it cannot be found, then INVALID_EP shall be returned.  . If the Remote Device is the Primary binding table cache or SrcAddress but does not have Binding Table resources for the request, a Status of TABLE_FULL is returned. ",
        "Effect on Receipt ": "Upon receipt, error checking is performed on the request as described in the previous section. Assuming the Status is SUCCESS, the parameters from the Bind_req are entered into the Binding Table at the Remote Device via the APSME-BIND.request primitive. "
    },
    "Unbind_rsp": {
        "fields": {
            "Name": [
                "Status"
            ],
            "Type": [
                "Integer"
            ],
            "ValidRange": [
                "SUCCESS NOT_SUPPORTED. INVALID_EP,NO_ENTRYor NOTAUTHORIZED"
            ],
            "Description": [
                "The status of the Unbind_req command."
            ]
        },
        "When Generated ": "The Unbind_rsp is generated in response to an Unbind_req. If the Unbind_req is processed and the corresponding Binding Table entry is removed from the Remote Device, a Status of SUCCESS is returned. If the Remote Device is not the ZigBee Coordinator or the SrcAddress, a Status of NOT_SUPPORTED is returned. The supplied endpoint shall be checked to determine whether it falls within the specified range. If it does not, a Status of INVALID_EP shall be returned. If the Remote Device is the ZigBee Coordinator or SrcAddress but does not have a Binding Table entry corresponding to the parameters received in the request, a Status of NO_ENTRY is returned. ",
        "Effect on Receipt ": "Upon receipt, error checking is performed on the response. If the status is SUCCESS, the device has successfully removed the binding entry for the parameters specified in the Unbind_req. "
    },
    "Bind_Register_rsp": {
        "fields": {
            "Name": [
                "Status",
                "BindingTableEntries",
                "BindingTableListCount",
                "BindingTableList"
            ],
            "Type": [
                "Integer",
                "Integer",
                "Integer",
                "List of source binding descriptors"
            ],
            "Valid Range": [
                "SUCCESS, NOT_SUPPORTED, TABLE_FULL",
                "0x0000 -0ffff",
                "0x0000 - 0xffff",
                "This list shall contain the number of elements given by the BindingTableListCount"
            ],
            "Description": [
                "The status of the Bind_Register_reg command.",
                "Number of binding table entries for the requesting device held by the primary binding table cache.",
                "Number of source binding table entries contained in this response.",
                "A list of source binding."
            ]
        },
        "When Generated ": "The Bind_Register_rsp is generated from a primary binding table cache device in response to a Bind_Register_req and contains the status of the request. This command shall be unicast to the requesting device. If the device receiving the Bind_Register_req is not a primary binding table cache a Status of NOT_SUPPORTED is returned. If its list of devices which choose to store their own binding table entries is full, a status of TABLE_FULL is returned. In these error cases, BindingTableEntries and BindingTableListCount shall be zero and BindingTableList shall be empty. A Status of SUCCESS indicates that the requesting device has been successfully registered. In the successful case, the primary binding table cache device shall search its cache for existing entries whose source address is the same as the parameter supplied in the Bind_Register_req command. The number of such entries is given in the response as BindingTableEntries. The entries are used to generate BindingTableList up to the maximum that can be contained in the response. The actual number of entries is given in the response as BindingTableListCount and may be less than BindingTableEntries if this is too large. In this case (which is expected to be rare) the primary binding table cache device shall use Bind_req commands to send the rest of the entries to the requesting device. ",
        "Effect on Receipt ": "The requesting device is notified of the results of its attempt to register. If successful, it shall store the source binding table entries from the response into its source binding table. "
    },
    "Replace_Device_rsp": {
        "fields": {
            "Name": [
                "Status"
            ],
            "Type": [
                "Integer"
            ],
            "ValidRange": [
                "NOT_SUPPORTED, INV_REQUESTTYPE"
            ],
            "Description": [
                "The status of the Replace_Device_req command."
            ]
        },
        "When Generated ": "The Replace_Device_rsp is generated from a primary binding table cache device in response to a Replace_Device_req and contains the status of the request. This command shall be unicast to the requesting device. If the device receiving the Replace_Device_req is not a primary binding table cache, a Status of NOT_SUPPORTED is returned. The primary binding table cache shall search its binding table for entries whose source address and source endpoint, or whose destination address and destination endpoint match OldAddress and OldEndpoint, as described in the text for Replace_Device_req. It shall change these entries to have NewAddress and possibly NewEndpoint. It shall then return a response of SUCCESS. ",
        "Effect on Receipt ": "The requesting device is notified of the status of its Replace_Device_req command. "
    },
    "Store_Bkup_Bind_Entry_rsp": {
        "fields": {
            "Name": [
                "Status"
            ],
            "Type": [
                "Integer"
            ],
            "ValidRange": [
                "SUCCESS, NOT_SUPPORTED INV_REQUESTTYPE. TABLEFULL"
            ],
            "Description": [
                "The status of the Store_Bkup_Bind_Entry_rsp command."
            ]
        },
        "When Generated ": "The Store_Bkup_Bind_Entry_rsp is generated from a backup binding table cache device in response to a Store_Bkup_Bind_Entry_req from a primary binding table cache, and contains the status of the request. This command shall be unicast to the requesting device. If the remote device is not a backup binding table cache, it shall return a status of NOT_SUPPORTED. If the originator of the request is not recognized as a primary binding table cache, it shall return a status of INV_REQUESTTYPE. Otherwise, the backup binding table cache shall add the binding entry to its binding table and return a status of SUCCESS. If there is no room, it shall return a status of TABLE_FULL. ",
        "Effect on Receipt ": "The requesting device is notified of the status of its attempt to store a bind entry. "
    },
    "Remove_Bkup_Bind_Entry_rsp": {
        "fields": {
            "Name": [
                "Status"
            ],
            "Type": [
                "Integer"
            ],
            "ValidRange": [
                "SUCCESS, NOTSUPPORTED INV_REQUESTTYPE NO_ENTRY"
            ],
            "Description": [
                "Thestatusofthe Remove_Bkup_Bind_Entry_rsp command."
            ]
        },
        "When Generated ": "The Remove_Bkup_Bind_Entry_rsp is generated from a backup binding table cache device in response to a Remove_Bkup_Bind_Entry_req from the primary binding table cache and contains the status of the request. This command shall be unicast to the requesting device. If the remote device is not a backup binding table cache, it shall return a status of NOT_SUPPORTED. If the originator of the request is not recognized as a primary binding table cache, it shall return a status of INV_REQUESTTYPE. Otherwise, the backup binding table cache shall delete the binding entry from its binding table and return a status of SUCCESS. If the entry is not found, it shall return a status of NO_ENTRY. ",
        "Effect on Receipt ": "The requesting device is notified of the status of its attempt to remove a bind entry from the backup cache. "
    },
    "Backup_Bind_Table_rsp": {
        "fields": {
            "Name": [
                "Status",
                "EntryCount"
            ],
            "Type": [
                "Integer",
                "Integer"
            ],
            "ValidRange": [
                "SUCCESS, NOT_SUPPORTED TABLE_FULL, INV_REQUESTTYPE",
                "0x0000-0xFFFF"
            ],
            "Description": [
                "Thestatusofthe Backup_Bind_Table_rsp command.",
                "The number of entries in the backup binding table."
            ]
        },
        "When Generated ": "The Backup_Bind_Table_rsp is generated from a backup binding table cache device in response to a Backup_Bind_Table_req from a primary binding table cache and contains the status of the request. This command shall be unicast to the requesting device. If the remote device is not a backup binding table cache, it shall return a status of NOT_SUPPORTED. If the originator of the request is not recognized as a primary binding table cache, it shall return a status of INV_REQUESTTYPE. Otherwise, the backup binding table cache shall overwrite the binding entries in its binding table starting with StartIndex and continuing for BindingTableListCount entries. If this exceeds its table size, it shall fill in as many entries as possible and return a status of TABLE_FULL and the EntryCount parameter will be the number of entries in the table. Otherwise, it shall return a status of SUCCESS and EntryCount will be equal to StartIndex $^+$ BindingTableListCount from Backup_Bind_Table_req. ",
        "Effect on Receipt ": "The requesting device is notified of the status of its attempt to store a binding table. "
    },
    "Recover_Bind_Table_rsp": {
        "fields": {
            "Name": [
                "Status",
                "BindingTableEntries",
                "StartIndex",
                "BindingTableListCount",
                "BindingTableList"
            ],
            "Type": [
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "Integer"
            ],
            "Valid Range": [
                "SUCCESS, NOT_SUPPORTED, INV_REQUESTTYPE, NO_ENTRY",
                "0x0000 - 0xffff",
                "0x00000xffff",
                "0x0000 - 0xffff",
                "The list shall contain the number of elements given by BindingTableListCount"
            ],
            "Description": [
                "The status of the Recover_Bind_Table_rsp command.",
                "Total number of binding table entries in the backup binding cache.",
                "Starting index within the binding table to begin reporting for the binding table list.",
                "Number of binding entries included within BindingTableList.",
                "A list of descriptors, beginning with the StartIndex element and continuing for BindingTableListCount of elements in the backupbinding table cache."
            ]
        },
        "When Generated ": "The Recover_Bind_Table_rsp is generated from a backup binding table cache device in response to a Recover_Bind_Table_req from a primary binding table cache and contains the status of the request. This command shall be unicast to the requesting device. If the responding device is not a backup binding table cache, it shall return a status of NOT_SUPPORTED. If the originator of the request is not recognized as a primary binding table cache it shall return a status of INV_REQUESTTYPE. Otherwise, the backup binding table cache shall prepare a list of binding table entries from its backup beginning with StartIndex. It will fit in as many entries as possible into a Recover_Bind_Table_rsp command and return a status of SUCCESS. If StartIndex is more than the number of entries in the Binding table, a status of NO_ENTRY is returned. For a successful response, BindingTableEntries is the total number of entries in the backup binding table, and BindingTableListCount is the number of entries which is being returned in the response. ",
        "Effect on Receipt ": "The requesting device is notified of the status of its attempt to restore a binding table. "
    },
    "Backup_Source_Bind_rsp": {
        "fields": {
            "Name": [
                "Status"
            ],
            "Type": [
                "Integer"
            ],
            "ValidRange": [
                "SUCCESS, NOT_SUPPORTED TABLEFULL INV_REQUESTTYPE"
            ],
            "Description": [
                "ThestatusoftheBackup_Source_Bind_rsp command."
            ]
        },
        "When Generated ": "The Backup_Source_Bind_rsp is generated from a backup binding table cache device in response to a Backup_Source_Bind_req from a primary binding table cache and contains the status of the request. This command shall be unicast to the requesting device. If the remote device is not a backup binding table cache, it shall return a status of NOT_SUPPORTED. If the originator of the request is not recognized as a primary binding table cache, it shall return a status of INV_REQUESTTYPE. Otherwise, the backup binding table cache shall overwrite its backup source binding table starting with StartIndex and continuing for BindingTableListCount entries. If this exceeds its table size, it shall return a status of TABLE_FULL. Otherwise it shall return a status of SUCCESS. ",
        "Effect on Receipt ": "The requesting device is notified of the status of its attempt to backup the source binding table. "
    },
    "Recover_Source_Bind_rsp": {
        "fields": {
            "Name": [
                "Status",
                "SourceTableEntries",
                "StartIndex",
                "SourceTableListCount",
                "SourceTableList"
            ],
            "Type": [
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "List of source descriptors"
            ],
            "Valid Range": [
                "SUCCESS, NOT_SUPPORTED, TABLE_FULL, INV_REQUESTTYPE",
                "0x0000-0xffff",
                "0x0000-0xffff"
            ],
            "Description": [
                "The status of the Recover_Source_Bind_rsp command.",
                "Total number of source table entries in the backup binding cache.",
                "Starting index within the source table to begin reporting for the source table list.",
                "Number of source table entries included withinSourceTableList.",
                "A list of descriptors, beginning with the StartIndex element and continuing for SourceTableList Count of elements inthe backup source table cache (consisting of IEEE addresses)."
            ]
        },
        "When Generated ": "The Recover_Source_Bind_rsp is generated from a backup binding table cache device in response to a Recover_Source_Bind_req from a primary binding table cache and contains the status of the request. This command shall be unicast to the requesting device. If the responding device is not a backup binding table cache, it shall return a status of NOT_SUPPORTED. If the originator of the request is not recognized as a primary binding table cache, it shall return a status of INV_REQUESTTYPE. Otherwise, the backup binding table cache shall prepare a list of binding table entries from its backup beginning with StartIndex. It will fit in as many entries as possible into a Recover_Source_Bind_rsp command and return a status of SUCCESS. If StartIndex is more than the number of entries in the Source table, a status of NO_ENTRY is returned. For a successful response, SourceTableEntries is the total number of entries in the backup source table, and SourceTableListCount is the number of entries which is being returned in the response. ",
        "Effect on Receipt ": "The requesting device is notified of the status of its attempt to restore a source binding table. "
    },
    "Mgmt_NWK_Disc_rsp": {
        "fields": {
            "Name": [
                "Status",
                "NetworkCount",
                "StartIndex",
                "NetworkListCount",
                "NetworkList"
            ],
            "Type": [
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "List of Network Descriptors"
            ],
            "Valid Range": [
                "NOT_SUPPORTED or any status code returned from the NLME-NETWORK-DISCOVERY.req uest primitive.",
                "0x00-0xff",
                "0x00-0xff",
                "0x00-0xff",
                "Thelistshallcontainthenumber of elements given by the NetworkListCountparameter."
            ],
            "Description": [
                "The status of the Mgmt_NWK_Disc_req command.",
                "The total number of networks reported by the NLME-NETWORK-DISCOVERY.confi rm.",
                "The starting point in the NetworkList from the NLME-NETWORK-DISCOVERY.confi rm where reporting begins for this response.",
                "The number of network list descriptors reported within this response.",
                "A list of descriptors, one for each of the networks discovered, beginning with the StartIndex element and continuingfor NetworkListCount,oftheelementsreturnedby the NLME-NETWORK-DISCOVERY.confi rm primitive. Each entry shall be formattedasillustratedinTable 2.128."
            ]
        },
        "When Generated ": "The Mgmt_NWK_Disc_rsp is generated in response to an Mgmt_NWK_Disc_req. If this management command is not supported, a status of NOT_SUPPORTED shall be returned and all parameter fields after the Status field shall be omitted. Otherwise, the Remote Device shall implement the following process. Upon receipt of and after support for the Mgmt_NWK_Disc_req has been verified, the Remote Device shall issue an NLME-NETWORK-DISCOVERY.request primitive using the ScanChannels and ScanDuration parameters, supplied in the Mgmt_NWK_Disc_req command. Upon receipt of the NLME-NETWORKDISCOVERY.confirm primitive, the Remote Device shall report the results, starting with the StartIndex element, via the Mgmt_NWK_Disc_rsp command. The NetworkList field shall contain whole NetworkList records, formatted as specified in Table 2.128, until the limit on MSDU size, i.e., aMaxMACFrameSize (see [B1]), is reached. The number of results reported shall be set in the NetworkListCount. ",
        "Effect on Receipt ": "The local device is notified of the results of its attempt to perform a remote network discovery. "
    },
    "Mgmt_Lqi_rsp": {
        "fields": {
            "Name": [
                "Status",
                "NeighborTableEntries",
                "StartIndex",
                "NeighborTableListCount"
            ],
            "Type": [
                "Integer",
                "Integer",
                "Integer",
                "Integer"
            ],
            "Valid Range": [
                "NOT_SUPPORTED or any status code returned from the NLME-GET.confirm primitive",
                "0x00-0xff",
                "0x00-0xff",
                "0x00-0x02"
            ],
            "Description": [
                "The status of the Mgmt _Lqi_req command.",
                "Total number of Neighbor Table entries within the Remote Device.",
                "Starting index within the Neighbor Table to begin reporting for the NeighborTableList.",
                "Number of Neighbor Table entries included within NeighborTableList."
            ]
        },
        "When Generated ": "The Mgmt_Lqi_rsp is generated in response to an Mgmt_Lqi_req. If this management command is not supported, a status of NOT_SUPPORTED shall be returned and all parameter fields after the Status field shall be omitted. Otherwise, the Remote Device shall implement the following processing. Upon receipt of and after support for the Mgmt_Lqi_req has been verified, the Remote Device shall perform an NLME-GET.request (for the nwkNeighborTable attribute) and process the resulting neighbor table (obtained via the NLME-GET.confirm primitive) to create the Mgmt_Lqi_rsp command. If nwkNeighborTable was successfully obtained but one or more of the fields required in the NeighborTableList record (see Table 2.130) are not supported (as they are optional), the Mgmt_Lqi_rsp shall return a status of NOT_SUPPORTED and all parameter fields after the Status field shall be omitted. Otherwise, the Mgmt_Lqi_rsp command shall contain the same status that was contained in the NLME-GET.confirm primitive and if this was not SUCCESS, all parameter fields after the status field shall be omitted. From the nwkNeighborTable attribute, the neighbor table shall be accessed, starting with the index specified by StartIndex, and shall be moved to the NeighborTableList field of the Mgmt_Lqi_rsp command. The entries reported from the neighbor table shall be those, starting with StartIndex and including whole NeighborTableList records (see Table 2.130) until the limit on MSDU size, i.e., aMaxMACFrameSize (see [B1]), is reached. Within the Mgmt_Lqi_Rsp command, the NeighborTableEntries field shall represent the total number of Neighbor Table entries in the Remote Device. The parameter NeighborTableListCount shall be the number of entries reported in the NeighborTableList field of the Mgmt_Lqi_rsp command. The extended address, device type, RxOnWhenIdle, and permit joining fields have “unknown” values which shall be returned where the values are not available. ",
        "Effect on Receipt ": "The local device is notified of the results of its attempt to obtain the neighbor table. "
    },
    "Mgmt_Rtg_rsp": {
        "fields": {
            "Name": [
                "Status",
                "RoutingTableEntries",
                "StartIndex",
                "RoutingTableListCount",
                "RoutingTableList",
                "Destination address",
                "Status",
                "Memory Constrained",
                "Many-to-one",
                "Route record required",
                "Reserved",
                "Next-hop address"
            ],
            "Type": [
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "List of Routing Descriptors"
            ],
            "Valid Range": [
                "NOT_SUPPORTED or any status code returned from the NLME-GET.confirm primitive",
                "0x00-0xff",
                "0x00-0xff",
                "0x00-0xff",
                "The list shall contain the number elements given by the RoutingTableListCount",
                "The 16-bit network address of this route.",
                "The status of the route.",
                "",
                "",
                "",
                "",
                "The 16-bit network address of the next hop on the way to the destination."
            ],
            "Description": [
                "The status of the Mgmt_Rtg_req command.",
                "Total number of Routing Table entries within the Remote Device.",
                "Starting index within the Routing Table to begin reporting for the RoutingTableList.",
                "Number of Routing Table entries included within RoutingTableList.",
                "A list of descriptors, beginning with the StartIndex element and continuing for RoutingTableListCount, of the elements in the Remote Device's Routing Table (see Table 2.132 for details).",
                "Destination address.",
                "0x0=ACTIVE. Ox1=DISCOVERY_UNDERWAY. 0x2=DISCOVERY_FAILED. 0x3=INACTIVE. 0x4=VALIDATIONUNDERWAY",
                "A flag indicating whether the device is a memory constrained concentrator.",
                "A flag indicating that the destination is a concentrator that issued a many-to-one request.",
                "A flag indicating that a route record command frame should be sent to the destination prior to the next data packet.",
                "",
                "Next-hop address."
            ]
        },
        "When Generated ": "The Mgmt_Rtg_rsp is generated in response to an Mgmt_Rtg_req. If this management command is not supported, a status of NOT_SUPPORTED shall be returned and all parameter fields after the Status field shall be omitted. Otherwise, the Remote Device shall implement the following processing. Upon receipt of and after support for the Mgmt_Rtg_req has been verified, the Remote Device shall perform an NLME-GET.request (for the nwkRouteTable attribute) and process the resulting NLME-GET.confirm (containing the nwkRouteTable attribute) to create the Mgmt_Rtg_rsp command. The Mgmt_Rtg_rsp command shall contain the same status that was contained in the NLME-GET.confirm primitive and if this was not SUCCESS, all parameter fields after the status field shall be omitted. From the nwkRouteTable attribute, the routing table shall be accessed, starting with the index specified by StartIndex, and moved to the RoutingTableList field of the Mgmt_Rtg_rsp command. The entries reported from the routing table shall be those, starting with StartIndex and including whole RoutingTableList records (see Table 2.132) until MSDU size limit, i.e., aMaxMACFrameSize (see [B1]), is reached. Within the Mgmt_Rtg_Rsp command, the RoutingTableEntries field shall represent the total number of Routing Table entries in the Remote Device. The RoutingTableListCount field shall be the number of entries reported in the RoutingTableList field of the Mgmt_Rtg_req command. ",
        "Effect on Receipt ": "The local device is notified of the results of its attempt to obtain the routing table. "
    },
    "Mgmt_Bind_rsp": {
        "fields": {
            "Name": [
                "Status",
                "BindingTableEntries",
                "StartIndex",
                "BindingTableListCount",
                "BindingTableList",
                "SrcAddr",
                "SrcEndpoint",
                "ClusterId",
                "DstAddrMode",
                "DstAddr",
                "DstEndpoint"
            ],
            "Type": [
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "List of Binding Descriptors"
            ],
            "Valid Range": [
                "NOT_SUPPORTED or any status code returned from the APSME-GET.confirm primitive",
                "0x00-0xff",
                "0x00-0xff",
                "0x00-0xff",
                "The list shall contain the number elements given by the BindingTableListCount",
                "A valid 64-bit IEEE address",
                "0x01 -0xfe",
                "0x0000-0xffff",
                "0x00-0xff",
                "As specified by the DstAddrMode field",
                "0x01-0xff"
            ],
            "Description": [
                "The status of the Mgmt_Bind_req command.",
                "Total number of Binding Table entries within the Remote Device.",
                "Starting index within the Binding Table to begin reporting for the BindingTableList.",
                "Number of Binding Table entries included within BindingTableList.",
                "A list of descriptors, beginning with the StartIndex element and continuing for BindingTableListCount, of the elements in the Remote Device's Binding Table (see Table 2.134 for details).",
                "The source IEEE address for the binding entry.",
                "The source endpoint for the binding entry.",
                "The identifier of the cluster on the source device that is bound to the destination device.",
                "The addressing mode for the destination address. This field can take one of the non-reserved values from the following list: 0x00 = reserved 0x01 = 16-bit group address for DstAddr and DstEndpoint not present 0x02 = reserved Ox03 = 64-bit extended address for DstAddr and DstEndp present 0x04 - 0xff = reserved",
                "The destination address for the binding entry.",
                "This field shall be present only if the DstAddrModefield has a value of Ox03 and, if present, shall be the destination endpoint for the binding entry."
            ]
        },
        "When Generated ": "The Mgmt_Bind_rsp is generated in response to a Mgmt_Bind_req. If this management command is not supported, a status of NOT_SUPPORTED shall be returned and all parameter fields after the Status field shall be omitted. Otherwise, the Remote Device shall implement the following processing. Upon receipt of and after support for the Mgmt_Bind_req has been verified, the Remote Device shall perform an APSME-GET.request (for the apsBindingTable attribute) and process the resulting APSME-GET.confirm (containing the apsBindingTable attribute) to create the Mgmt_Bind_rsp command. The Mgmt_Bind_rsp command shall contain the same status that was contained in the APSME-GET.confirm primitive and if this was not SUCCESS, all parameter fields after the status field shall be omitted. From the apsBindingTable attribute, the binding table shall be accessed, starting with the index specified by StartIndex, and moved to the BindingTableList field of the Mgmt_Bind_rsp command. The entries reported from the binding table shall be those, starting with StartIndex and including whole BindingTableList records (see Table 2.134) until the MSDU size limit, i.e., aMaxMACFrameSize (see [B1]), is reached. Within the Mgmt_Bind_Rsp command, the BindingTableEntries field shall represent the total number of Binding Table entries in the Remote Device. The BindingTableListCount field shall be the number of entries reported in the BindingTableList field of the Mgmt_Bind_req command. ",
        "Effect on Receipt ": "The local device is notified of the results of its attempt to obtain the binding table. "
    },
    "Mgmt_Leave_rsp": {
        "fields": {
            "Name": [
                "Status"
            ],
            "Type": [
                "Integer"
            ],
            "ValidRange": [
                "NOT_SUPPORTED, NOT_AUTHORIZEDoranystatus codereturnedfrom the NLME-LEAVE.confirmprimitive"
            ],
            "Description": [
                "The status of the Mgmt_Leave_req command."
            ]
        },
        "When Generated ": "The Mgmt_Leave_rsp is generated in response to a Mgmt_Leave_req. Stacks certified prior to revision 21 may or may not support this command. If this management command is not supported, a status of NOT_SUPPORTED shall be returned. All stacks certified to revision 21 and later must support this command. ",
        "Effect on Receipt ": "Upon receipt of the Mgmt_leave_rsp the device may parse the Status field to determine whether or not the remote device accepted the leave request. "
    },
    "Mgmt_Direct_Join_rsp": {
        "fields": {
            "Name": [
                "Status"
            ],
            "Type": [
                "Integer"
            ],
            "Valid Range": [
                "NOT_SUPPORTED,NOT_AUTHORIZED or anystatus codereturnedfrom the NLME-DIRECT-JOIN.confirmprimitive"
            ],
            "Description": [
                "Thestatusofthe Mgmt_Direct_Join_req command."
            ]
        },
        "When Generated ": "The Mgmt_Direct_Join_rsp is generated in response to a Mgmt_Direct_Join_req. If this management command is not supported, a status of NOT_SUPPORTED shall be returned. Otherwise, the Remote Device shall implement the following processing. Upon receipt and after support for the Mgmt_Direct_Join_req has been verified, the Remote Device shall execute the NLME-DIRECT-JOIN.request to directly associate the DeviceAddress contained in the Mgmt_Direct_Join_req to the network. The Mgmt_Direct_Join_rsp shall contain the same status that was contained in the NLME-DIRECT-JOIN.confirm primitive. ",
        "Effect on Receipt ": "Upon receipt and after support for the Mgmt_Direct_Join_req has been verified, the Remote Device shall execute the NLME-DIRECT-JOIN.request to directly associate the DeviceAddress contained in the Mgmt_Direct_Join_req to the network. "
    },
    "Mgmt_Permit_Joining_rsp": {
        "fields": {
            "Name": [
                "Status"
            ],
            "Type": [
                "Integer"
            ],
            "ValidRange": [
                "SUCCESS, INVALID_REQUEST NOT_AUTHORIZEDor anystatus codereturnedfromthe NLME-PERMIT-JOINING.confirm primitive"
            ],
            "Description": [
                "Thestatusofthe Mgmt_Permit_Joining_rsp command."
            ]
        },
        "When Generated ": "The Mgmt_Permit_Joining_rsp is generated in response to a unicast Mgmt_Permit_Joining_req. In the description which follows, note that no response shall be sent if the Mgmt_Permit_Joining_req was received as a broadcast to all routers. If this management command is not permitted by the requesting device, a status of INVALID_REQUEST shall be returned. Upon receipt and after support for Mgmt_Permit_Joining_req has been verified, the Remote Device shall execute the NLME-PERMIT-JOINING.request. The Mgmt_Permit-Joining_rsp shall contain the same status that was contained in the NLME-PERMIT-JOINING.confirm primitive. ",
        "Effect on Receipt ": "The status of the Mgmt_Permit_Joining_req command is notified to the requestor. "
    },
    "Mgmt_Cache_rsp": {
        "fields": {
            "Name": [
                "Status",
                "DiscoveryCacheEntries",
                "StartIndex",
                "DiscoveryCacheListCount",
                "DiscoveryCacheList"
            ],
            "Type": [
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "Integer"
            ],
            "ValidRange": [
                "SUCCESSor NOT_SUPPORTED",
                "0x00 - 0xff",
                "0x00-0xff"
            ],
            "Description": [
                "The status of the Mgmt_Cache_rsp command.",
                "DiscoveryCacheEntries.",
                "StartIndex.",
                "The list shall contain the number of elements given by the DiscoveryCacheListCount parameter.",
                "A list of descriptors, one for each of the Discovery cache devices registered, beginning with the StartIndex element and continuing for DiscoveryCacheListCount, of the registered devices in the Primary Discovery Cache.Each entry shall be formatted as illustrated in Table 2.139."
            ]
        },
        "When Generated ": "The Mgmt_Cache_rsp is generated in response to an Mgmt_Cache_req. If this management command is not supported, or the Remote Device is not a Primary Cache Device, a status of NOT_SUPPORTED shall be returned and all parameter fields after the Status field shall be omitted. Otherwise, the Remote Device shall implement the following processing. Upon receipt of the Mgmt_Cache_req and after support for the Mgmt_Cache_req has been verified, the Remote Device shall access an internally maintained list of registered ZigBee End Devices utilizing the discovery cache on this Primary Discovery Cache device. The entries reported shall be those, starting with StartIndex and including whole DiscoveryCacheList records (see Table 2.142) until the limit on MSDU size, i.e., aMaxMACFrameSize (see [B1]), is reached. Within the Mgmt_Cache_rsp command, the DiscoveryCacheListEntries field shall represent the total number of registered entries in the Remote Device. The parameter DiscoveryCacheListCount shall be the number of entries reported in the DiscoveryCacheList field of the Mgmt_Cache_rsp command. ",
        "Effect on Receipt ": "The local device is notified of the results of its attempt to obtain the discovery cache list. "
    },
    "Mgmt_NWK_Update_notify": {
        "fields": {
            "Name": [
                "Status",
                "ScannedChannels",
                "TotalTransmissions",
                "TransmissionFailures",
                "ScannedChannelsListCount",
                "EnergyValues"
            ],
            "Type": [
                "Integer",
                "Bitmap",
                "Integer",
                "Integer",
                "Integer",
                "Integer"
            ],
            "Valid Range": [
                "SUCCESS, INVALID_REQUEST, NOT_SUPPORTED or any status values returned from the PLME-SET,confirm primitive",
                "0x00ooooo0-Oxffffffff.",
                "0x0000-0xffff",
                "x0000 -0xffff",
                "0x00 - 0xff",
                "List of ED values each of which can be in the range of 0x00-0xff"
            ],
            "Description": [
                "The status of the Mgmt_NWK_Update_notify command.",
                "List of channels scanned by the request.",
                "Count of the total transmissions reported by the device.",
                "Sum of the total transmission failures reported by the device.",
                "The list shall contain the number of records contained in the EnergyValues parameter.",
                "The result of an energy measurement made on this channel in accordance with [B1]."
            ]
        },
        "When Generated ": "The Mgmt_NWK_Update_notify is provided to enable ZigBee devices to report the condition on local channels to a network manager. The scanned channel list is the report of channels scanned and it is followed by a list of records, one for each channel scanned, each record including one byte of the energy level measured during the scan, or 0xff if there is too much interference on this channel. When sent in response to a Mgmt_NWK_Update_req command the status field shall represent the status of the request. When sent unsolicited the status field shall be set to SUCCESS. ",
        "Effect on Receipt ": "The local device is notified of the local channel conditions at the transmitting device, or of its attempt to update network configuration parameters. "
    }
}