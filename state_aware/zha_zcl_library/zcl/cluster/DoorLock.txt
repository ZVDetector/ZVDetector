class DoorLock(Cluster):
    """The door lock cluster provides an interface to a generic way to secure a door."""

    LockState: Final = LockState
    LockType: Final = LockType
    DoorState: Final = DoorState
    OperatingMode: Final = OperatingMode
    SupportedOperatingModes: Final = SupportedOperatingModes
    DefaultConfigurationRegister: Final = DefaultConfigurationRegister
    ZigbeeSecurityLevel: Final = ZigbeeSecurityLevel
    AlarmMask: Final = AlarmMask
    KeypadOperationEventMask: Final = KeypadOperationEventMask
    RFOperationEventMask: Final = RFOperationEventMask
    ManualOperatitonEventMask: Final = ManualOperatitonEventMask
    RFIDOperationEventMask: Final = RFIDOperationEventMask
    KeypadProgrammingEventMask: Final = KeypadProgrammingEventMask
    RFProgrammingEventMask: Final = RFProgrammingEventMask
    RFIDProgrammingEventMask: Final = RFIDProgrammingEventMask
    OperationEventSource: Final = OperationEventSource
    OperationEvent: Final = OperationEvent
    ProgrammingEvent: Final = ProgrammingEvent
    UserStatus: Final = UserStatus
    UserType: Final = UserType
    DayMask: Final = DayMask
    EventType: Final = EventType

    cluster_id: Final[t.uint16_t] = 0x0101
    name: Final = "Door Lock"
    ep_attribute: Final = "door_lock"

    class AttributeDefs(BaseAttributeDefs):
        lock_state: Final = ZCLAttributeDef(
            id=0x0000, type=LockState, access="rp", mandatory=True
        )
        lock_type: Final = ZCLAttributeDef(
            id=0x0001, type=LockType, access="r", mandatory=True
        )
        actuator_enabled: Final = ZCLAttributeDef(
            id=0x0002, type=t.Bool, access="r", mandatory=True
        )
        door_state: Final = ZCLAttributeDef(id=0x0003, type=DoorState, access="rp")
        door_open_events: Final = ZCLAttributeDef(
            id=0x0004, type=t.uint32_t, access="rw"
        )
        door_closed_events: Final = ZCLAttributeDef(
            id=0x0005, type=t.uint32_t, access="rw"
        )
        open_period: Final = ZCLAttributeDef(id=0x0006, type=t.uint16_t, access="rw")
        num_of_lock_records_supported: Final = ZCLAttributeDef(
            id=0x0010, type=t.uint16_t, access="r"
        )
        num_of_total_users_supported: Final = ZCLAttributeDef(
            id=0x0011, type=t.uint16_t, access="r"
        )
        num_of_pin_users_supported: Final = ZCLAttributeDef(
            id=0x0012, type=t.uint16_t, access="r"
        )
        num_of_rfid_users_supported: Final = ZCLAttributeDef(
            id=0x0013, type=t.uint16_t, access="r"
        )
        num_of_week_day_schedules_supported_per_user: Final = ZCLAttributeDef(
            id=0x0014, type=t.uint8_t, access="r"
        )
        num_of_year_day_schedules_supported_per_user: Final = ZCLAttributeDef(
            id=0x0015, type=t.uint8_t, access="r"
        )
        num_of_holiday_scheduleds_supported: Final = ZCLAttributeDef(
            id=0x0016, type=t.uint8_t, access="r"
        )
        max_pin_len: Final = ZCLAttributeDef(id=0x0017, type=t.uint8_t, access="r")
        min_pin_len: Final = ZCLAttributeDef(id=0x0018, type=t.uint8_t, access="r")
        max_rfid_len: Final = ZCLAttributeDef(id=0x0019, type=t.uint8_t, access="r")
        min_rfid_len: Final = ZCLAttributeDef(id=0x001A, type=t.uint8_t, access="r")
        enable_logging: Final = ZCLAttributeDef(id=0x0020, type=t.Bool, access="r*wp")
        language: Final = ZCLAttributeDef(
            id=0x0021, type=t.LimitedCharString(3), access="r*wp"
        )
        led_settings: Final = ZCLAttributeDef(id=0x0022, type=t.uint8_t, access="r*wp")
        auto_relock_time: Final = ZCLAttributeDef(
            id=0x0023, type=t.uint32_t, access="r*wp"
        )
        sound_volume: Final = ZCLAttributeDef(id=0x0024, type=t.uint8_t, access="r*wp")
        operating_mode: Final = ZCLAttributeDef(
            id=0x0025, type=OperatingMode, access="r*wp"
        )
        supported_operating_modes: Final = ZCLAttributeDef(
            id=0x0026, type=SupportedOperatingModes, access="r"
        )
        default_configuration_register: Final = ZCLAttributeDef(
            id=0x0027,
            type=DefaultConfigurationRegister,
            access="rp",
        )
        enable_local_programming: Final = ZCLAttributeDef(
            id=0x0028, type=t.Bool, access="r*wp"
        )
        enable_one_touch_locking: Final = ZCLAttributeDef(
            id=0x0029, type=t.Bool, access="rwp"
        )
        enable_inside_status_led: Final = ZCLAttributeDef(
            id=0x002A, type=t.Bool, access="rwp"
        )
        enable_privacy_mode_button: Final = ZCLAttributeDef(
            id=0x002B, type=t.Bool, access="rwp"
        )
        wrong_code_entry_limit: Final = ZCLAttributeDef(
            id=0x0030, type=t.uint8_t, access="r*wp"
        )
        user_code_temporary_disable_time: Final = ZCLAttributeDef(
            id=0x0031, type=t.uint8_t, access="r*wp"
        )
        send_pin_ota: Final = ZCLAttributeDef(id=0x0032, type=t.Bool, access="r*wp")
        require_pin_for_rf_operation: Final = ZCLAttributeDef(
            id=0x0033, type=t.Bool, access="r*wp"
        )
        zigbee_security_level: Final = ZCLAttributeDef(
            id=0x0034, type=ZigbeeSecurityLevel, access="rp"
        )
        alarm_mask: Final = ZCLAttributeDef(id=0x0040, type=AlarmMask, access="rwp")
        keypad_operation_event_mask: Final = ZCLAttributeDef(
            id=0x0041, type=KeypadOperationEventMask, access="rwp"
        )
        rf_operation_event_mask: Final = ZCLAttributeDef(
            id=0x0042, type=RFOperationEventMask, access="rwp"
        )
        manual_operation_event_mask: Final = ZCLAttributeDef(
            id=0x0043, type=ManualOperatitonEventMask, access="rwp"
        )
        rfid_operation_event_mask: Final = ZCLAttributeDef(
            id=0x0044, type=RFIDOperationEventMask, access="rwp"
        )
        keypad_programming_event_mask: Final = ZCLAttributeDef(
            id=0x0045,
            type=KeypadProgrammingEventMask,
            access="rwp",
        )
        rf_programming_event_mask: Final = ZCLAttributeDef(
            id=0x0046, type=RFProgrammingEventMask, access="rwp"
        )
        rfid_programming_event_mask: Final = ZCLAttributeDef(
            id=0x0047, type=RFIDProgrammingEventMask, access="rwp"
        )

    class ServerCommandDefs(BaseCommandDefs):
        lock_door: Final = ZCLCommandDef(
            id=0x00,
            schema={"pin_code?": t.CharacterString},
            direction=Direction.Client_to_Server,
        )
        unlock_door: Final = ZCLCommandDef(
            id=0x01,
            schema={"pin_code?": t.CharacterString},
            direction=Direction.Client_to_Server,
        )
        toggle_door: Final = ZCLCommandDef(
            id=0x02,
            schema={"pin_code?": t.CharacterString},
            direction=Direction.Client_to_Server,
        )
        unlock_with_timeout: Final = ZCLCommandDef(
            id=0x03,
            schema={"timeout": t.uint16_t, "pin_code?": t.CharacterString},
            direction=Direction.Client_to_Server,
        )
        get_log_record: Final = ZCLCommandDef(
            id=0x04,
            schema={"log_index": t.uint16_t},
            direction=Direction.Client_to_Server,
        )
        set_pin_code: Final = ZCLCommandDef(
            id=0x05,
            schema={
                "user_id": t.uint16_t,
                "user_status": UserStatus,
                "user_type": UserType,
                "pin_code": t.CharacterString,
            },
            direction=Direction.Client_to_Server,
        )
        get_pin_code: Final = ZCLCommandDef(
            id=0x06,
            schema={"user_id": t.uint16_t},
            direction=Direction.Client_to_Server,
        )
        clear_pin_code: Final = ZCLCommandDef(
            id=0x07,
            schema={"user_id": t.uint16_t},
            direction=Direction.Client_to_Server,
        )
        clear_all_pin_codes: Final = ZCLCommandDef(
            id=0x08, schema={}, direction=Direction.Client_to_Server
        )
        set_user_status: Final = ZCLCommandDef(
            id=0x09,
            schema={"user_id": t.uint16_t, "user_status": UserStatus},
            direction=Direction.Client_to_Server,
        )
        get_user_status: Final = ZCLCommandDef(
            id=0x0A,
            schema={"user_id": t.uint16_t},
            direction=Direction.Client_to_Server,
        )
        set_week_day_schedule: Final = ZCLCommandDef(
            id=0x0B,
            schema={
                "schedule_id": t.uint8_t,
                "user_id": t.uint16_t,
                "days_mask": DayMask,
                "start_hour": t.uint8_t,
                "start_minute": t.uint8_t,
                "end_hour": t.uint8_t,
                "end_minute": t.uint8_t,
            },
            direction=Direction.Client_to_Server,
        )
        get_week_day_schedule: Final = ZCLCommandDef(
            id=0x0C,
            schema={"schedule_id": t.uint8_t, "user_id": t.uint16_t},
            direction=Direction.Client_to_Server,
        )
        clear_week_day_schedule: Final = ZCLCommandDef(
            id=0x0D,
            schema={"schedule_id": t.uint8_t, "user_id": t.uint16_t},
            direction=Direction.Client_to_Server,
        )
        set_year_day_schedule: Final = ZCLCommandDef(
            id=0x0E,
            schema={
                "schedule_id": t.uint8_t,
                "user_id": t.uint16_t,
                "local_start_time": t.LocalTime,
                "local_end_time": t.LocalTime,
            },
            direction=Direction.Client_to_Server,
        )
        get_year_day_schedule: Final = ZCLCommandDef(
            id=0x0F,
            schema={"schedule_id": t.uint8_t, "user_id": t.uint16_t},
            direction=Direction.Client_to_Server,
        )
        clear_year_day_schedule: Final = ZCLCommandDef(
            id=0x10,
            schema={"schedule_id": t.uint8_t, "user_id": t.uint16_t},
            direction=Direction.Client_to_Server,
        )
        set_holiday_schedule: Final = ZCLCommandDef(
            id=0x11,
            schema={
                "holiday_schedule_id": t.uint8_t,
                "local_start_time": t.LocalTime,
                "local_end_time": t.LocalTime,
                "operating_mode_during_holiday": OperatingMode,
            },
            direction=Direction.Client_to_Server,
        )
        get_holiday_schedule: Final = ZCLCommandDef(
            id=0x12,
            schema={"holiday_schedule_id": t.uint8_t},
            direction=Direction.Client_to_Server,
        )
        clear_holiday_schedule: Final = ZCLCommandDef(
            id=0x13,
            schema={"holiday_schedule_id": t.uint8_t},
            direction=Direction.Client_to_Server,
        )
        set_user_type: Final = ZCLCommandDef(
            id=0x14,
            schema={"user_id": t.uint16_t, "user_type": UserType},
            direction=Direction.Client_to_Server,
        )
        get_user_type: Final = ZCLCommandDef(
            id=0x15,
            schema={"user_id": t.uint16_t},
            direction=Direction.Client_to_Server,
        )
        set_rfid_code: Final = ZCLCommandDef(
            id=0x16,
            schema={
                "user_id": t.uint16_t,
                "user_status": UserStatus,
                "user_type": UserType,
                "rfid_code": t.CharacterString,
            },
            direction=Direction.Client_to_Server,
        )
        get_rfid_code: Final = ZCLCommandDef(
            id=0x17,
            schema={"user_id": t.uint16_t},
            direction=Direction.Client_to_Server,
        )
        clear_rfid_code: Final = ZCLCommandDef(
            id=0x18,
            schema={"user_id": t.uint16_t},
            direction=Direction.Client_to_Server,
        )
        clear_all_rfid_codes: Final = ZCLCommandDef(
            id=0x19, schema={}, direction=Direction.Client_to_Server
        )

    class ClientCommandDefs(BaseCommandDefs):
        lock_door_response: Final = ZCLCommandDef(
            id=0x00,
            schema={"status": foundation.Status},
            direction=Direction.Server_to_Client,
        )
        unlock_door_response: Final = ZCLCommandDef(
            id=0x01,
            schema={"status": foundation.Status},
            direction=Direction.Server_to_Client,
        )
        toggle_door_response: Final = ZCLCommandDef(
            id=0x02,
            schema={"status": foundation.Status},
            direction=Direction.Server_to_Client,
        )
        unlock_with_timeout_response: Final = ZCLCommandDef(
            id=0x03,
            schema={"status": foundation.Status},
            direction=Direction.Server_to_Client,
        )
        get_log_record_response: Final = ZCLCommandDef(
            id=0x04,
            schema={
                "log_entry_id": t.uint16_t,
                "timestamp": t.uint32_t,
                "event_type": EventType,
                "source": OperationEventSource,
                "event_id_or_alarm_code": t.uint8_t,
                "user_id": t.uint16_t,
                "pin?": t.CharacterString,
            },
            direction=Direction.Server_to_Client,
        )
        set_pin_code_response: Final = ZCLCommandDef(
            id=0x05,
            schema={"status": foundation.Status},
            direction=Direction.Server_to_Client,
        )
        get_pin_code_response: Final = ZCLCommandDef(
            id=0x06,
            schema={
                "user_id": t.uint16_t,
                "user_status": UserStatus,
                "user_type": UserType,
                "code": t.CharacterString,
            },
            direction=Direction.Server_to_Client,
        )
        clear_pin_code_response: Final = ZCLCommandDef(
            id=0x07,
            schema={"status": foundation.Status},
            direction=Direction.Server_to_Client,
        )
        clear_all_pin_codes_response: Final = ZCLCommandDef(
            id=0x08,
            schema={"status": foundation.Status},
            direction=Direction.Server_to_Client,
        )
        set_user_status_response: Final = ZCLCommandDef(
            id=0x09,
            schema={"status": foundation.Status},
            direction=Direction.Server_to_Client,
        )
        get_user_status_response: Final = ZCLCommandDef(
            id=0x0A,
            schema={"user_id": t.uint16_t, "user_status": UserStatus},
            direction=Direction.Server_to_Client,
        )
        set_week_day_schedule_response: Final = ZCLCommandDef(
            id=0x0B,
            schema={"status": foundation.Status},
            direction=Direction.Server_to_Client,
        )
        get_week_day_schedule_response: Final = ZCLCommandDef(
            id=0x0C,
            schema={
                "schedule_id": t.uint8_t,
                "user_id": t.uint16_t,
                "status": foundation.Status,
                "days_mask?": t.uint8_t,
                "start_hour?": t.uint8_t,
                "start_minute?": t.uint8_t,
                "end_hour?": t.uint8_t,
                "end_minute?": t.uint8_t,
            },
            direction=Direction.Server_to_Client,
        )
        clear_week_day_schedule_response: Final = ZCLCommandDef(
            id=0x0D,
            schema={"status": foundation.Status},
            direction=Direction.Server_to_Client,
        )
        set_year_day_schedule_response: Final = ZCLCommandDef(
            id=0x0E,
            schema={"status": foundation.Status},
            direction=Direction.Server_to_Client,
        )
        get_year_day_schedule_response: Final = ZCLCommandDef(
            id=0x0F,
            schema={
                "schedule_id": t.uint8_t,
                "user_id": t.uint16_t,
                "status": foundation.Status,
                "local_start_time?": t.LocalTime,
                "local_end_time?": t.LocalTime,
            },
            direction=Direction.Server_to_Client,
        )
        clear_year_day_schedule_response: Final = ZCLCommandDef(
            id=0x10,
            schema={"status": foundation.Status},
            direction=Direction.Server_to_Client,
        )
        set_holiday_schedule_response: Final = ZCLCommandDef(
            id=0x11,
            schema={"status": foundation.Status},
            direction=Direction.Server_to_Client,
        )
        get_holiday_schedule_response: Final = ZCLCommandDef(
            id=0x12,
            schema={
                "holiday_schedule_id": t.uint8_t,
                "status": foundation.Status,
                "local_start_time?": t.LocalTime,
                "local_end_time?": t.LocalTime,
                "operating_mode_during_holiday?": t.uint8_t,
            },
            direction=Direction.Server_to_Client,
        )
        clear_holiday_schedule_response: Final = ZCLCommandDef(
            id=0x13,
            schema={"status": foundation.Status},
            direction=Direction.Server_to_Client,
        )
        set_user_type_response: Final = ZCLCommandDef(
            id=0x14,
            schema={"status": foundation.Status},
            direction=Direction.Server_to_Client,
        )
        get_user_type_response: Final = ZCLCommandDef(
            id=0x15,
            schema={"user_id": t.uint16_t, "user_type": UserType},
            direction=Direction.Server_to_Client,
        )
        set_rfid_code_response: Final = ZCLCommandDef(
            id=0x16,
            schema={"status": foundation.Status},
            direction=Direction.Server_to_Client,
        )
        get_rfid_code_response: Final = ZCLCommandDef(
            id=0x17,
            schema={
                "user_id": t.uint16_t,
                "user_status": UserStatus,
                "user_type": UserType,
                "rfid_code": t.CharacterString,
            },
            direction=Direction.Server_to_Client,
        )
        clear_rfid_code_response: Final = ZCLCommandDef(
            id=0x18,
            schema={"status": foundation.Status},
            direction=Direction.Server_to_Client,
        )
        clear_all_rfid_codes_response: Final = ZCLCommandDef(
            id=0x19,
            schema={"status": foundation.Status},
            direction=Direction.Server_to_Client,
        )
        operation_event_notification: Final = ZCLCommandDef(
            id=0x20,
            schema={
                "operation_event_source": OperationEventSource,
                "operation_event_code": OperationEvent,
                "user_id": t.uint16_t,
                "pin": t.CharacterString,
                "local_time": t.LocalTime,
                "data?": t.CharacterString,
            },
            direction=Direction.Server_to_Client,
        )
        programming_event_notification: Final = ZCLCommandDef(
            id=0x21,
            schema={
                "program_event_source": OperationEventSource,
                "program_event_code": ProgrammingEvent,
                "user_id": t.uint16_t,
                "pin": t.CharacterString,
                "user_type": UserType,
                "user_status": UserStatus,
                "local_time": t.LocalTime,
                "data?": t.CharacterString,
            },
            direction=Direction.Server_to_Client,
        )