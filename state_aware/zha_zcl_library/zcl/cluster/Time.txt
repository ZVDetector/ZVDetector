class Time(Cluster):
    """Attributes and commands that provide a basic interface
    to a real-time clock.
    """

    TimeStatus: Final = TimeStatus

    cluster_id: Final[t.uint16_t] = 0x000A
    ep_attribute: Final = "time"

    class AttributeDefs(BaseAttributeDefs):
        time: Final = ZCLAttributeDef(
            id=0x0000, type=t.UTCTime, access="r*w", mandatory=True
        )
        time_status: Final = ZCLAttributeDef(
            id=0x0001, type=TimeStatus, access="r*w", mandatory=True
        )
        time_zone: Final = ZCLAttributeDef(id=0x0002, type=t.int32s, access="rw")
        dst_start: Final = ZCLAttributeDef(id=0x0003, type=t.uint32_t, access="rw")
        dst_end: Final = ZCLAttributeDef(id=0x0004, type=t.uint32_t, access="rw")
        dst_shift: Final = ZCLAttributeDef(id=0x0005, type=t.int32s, access="rw")
        standard_time: Final = ZCLAttributeDef(
            id=0x0006, type=t.StandardTime, access="r"
        )
        local_time: Final = ZCLAttributeDef(id=0x0007, type=t.LocalTime, access="r")
        last_set_time: Final = ZCLAttributeDef(id=0x0008, type=t.UTCTime, access="r")
        valid_until_time: Final = ZCLAttributeDef(
            id=0x0009, type=t.UTCTime, access="rw"
        )
        cluster_revision: Final = foundation.ZCL_CLUSTER_REVISION_ATTR
        reporting_status: Final = foundation.ZCL_REPORTING_STATUS_ATTR

    def handle_read_attribute_time(self) -> t.UTCTime:
        now = datetime.now(timezone.utc)
        return t.UTCTime((now - ZIGBEE_EPOCH).total_seconds())

    def handle_read_attribute_time_status(self) -> TimeStatus:
        return (
            TimeStatus.Master
            | TimeStatus.Synchronized
            | TimeStatus.Master_for_Zone_and_DST
        )

    def handle_read_attribute_time_zone(self) -> t.int32s:
        tz_offset = datetime.now().astimezone().utcoffset()
        assert tz_offset is not None

        return t.int32s(tz_offset.total_seconds())

    def handle_read_attribute_local_time(self) -> t.LocalTime:
        now = datetime.now(timezone.utc)
        tz_offset = datetime.now().astimezone().utcoffset()
        assert tz_offset is not None

        return t.LocalTime((now + tz_offset - ZIGBEE_EPOCH).total_seconds())